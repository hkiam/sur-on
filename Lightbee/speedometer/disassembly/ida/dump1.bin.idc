//
// +-------------------------------------------------------------------------+
// |      This file was generated by The Interactive Disassembler (IDA)      |
// |           Copyright (c) 2022 Hex-Rays, <support@hex-rays.com>           |
// |                      License info: 48-4174-32E0-0F                      |
// |                       Think-Cell Operations GmbH                        |
// +-------------------------------------------------------------------------+
//
//
//      This file should be used in the following way:
//         - reload executable into IDA with using switch -c
//         - use File, Load IDC file and load this file.
//
//      NOTE: This file doesn't contain all information from the database.
//

#define UNLOADED_FILE   1
#include <idc.idc>

static main(void)
{
        // set 'loading idc file' mode
        set_inf_attr(INF_GENFLAGS, INFFL_LOADIDC|get_inf_attr(INF_GENFLAGS));
        GenInfo();            // various settings
        Segments();           // segmentation
        Enums();              // enumerations
        Structures();         // structure types
        ApplyStrucTInfos();   // structure type infos
        Patches();            // manual patches
        SegRegs();            // segment register values
        Bytes();              // individual bytes (code,data)
        Functions();          // function definitions
        // clear 'loading idc file' mode
        set_inf_attr(INF_GENFLAGS, ~INFFL_LOADIDC&get_inf_attr(INF_GENFLAGS));
}

//------------------------------------------------------------------------
// General information

static GenInfo(void) {

        delete_all_segments();    // purge database
	set_processor_type("RL78", SETPROC_USER);
	set_inf_attr(INF_COMPILER, 0);
	set_inf_attr(INF_STRLIT_BREAK, 0xA);
	set_flag(INF_CMTFLG, SCF_ALLCMT, 1);
	set_flag(INF_OUTFLAGS, OFLG_SHOW_VOID, 0);
	set_inf_attr(INF_XREFNUM, 2);
	set_flag(INF_OUTFLAGS, OFLG_SHOW_AUTO, 1);
	set_inf_attr(INF_INDENT, 16);
	set_inf_attr(INF_CMT_INDENT, 40);
	set_inf_attr(INF_MAXREF, 0x10);
}

//------------------------------------------------------------------------
// Information about segmentation

static Segments(void) {
	set_selector(0X1,0);

	add_segm_ex(0,0X4000,0,0,1,2,ADDSEG_NOSREG);
	SegRename(0,"ROM");
	SegClass (0,"CODE");
	SegDefReg(0x0,"RBS",0x0);
	SegDefReg(0x0,"ES",0xF);
	set_segm_type(0,2);
	add_segm_ex(0X4000,0XF0000,0,0,1,5,ADDSEG_NOSREG);
	SegRename(0X4000,"ROM");
	SegClass (0X4000,"CODE");
	SegDefReg(0x4000,"ds",0x0);
	SegDefReg(0x4000,"RBS",0x0);
	SegDefReg(0x4000,"ES",0xF);
	set_segm_type(0X4000,2);
	add_segm_ex(0XF0000,0XF0800,0,0,1,2,ADDSEG_NOSREG);
	SegRename(0XF0000,"SFR2");
	SegClass (0XF0000,"DATA");
	SegDefReg(0xF0000,"RBS",0x0);
	SegDefReg(0xF0000,"ES",0xF);
	set_segm_type(0XF0000,3);
	add_segm_ex(0XF0800,0XF1000,0,0,1,2,ADDSEG_NOSREG);
	SegRename(0XF0800,"RESERVED");
	SegClass (0XF0800,"DATA");
	SegDefReg(0xF0800,"RBS",0x0);
	SegDefReg(0xF0800,"ES",0xF);
	set_segm_type(0XF0800,3);
	add_segm_ex(0XF1000,0XFF700,0,0,1,5,ADDSEG_NOSREG);
	SegRename(0XF1000,"ROM");
	SegClass (0XF1000,"CODE");
	SegDefReg(0xF1000,"ds",0x0);
	SegDefReg(0xF1000,"RBS",0x0);
	SegDefReg(0xF1000,"ES",0xF);
	set_segm_type(0XF1000,2);
	add_segm_ex(0XFF700,0XFFF00,0,0,1,2,ADDSEG_NOSREG);
	SegRename(0XFF700,"RAM");
	SegClass (0XFF700,"DATA");
	SegDefReg(0xFF700,"RBS",0x0);
	SegDefReg(0xFF700,"ES",0xF);
	set_segm_type(0XFF700,3);
	add_segm_ex(0XFFF00,0XFFFFF,0,0,1,2,ADDSEG_NOSREG);
	SegRename(0XFFF00,"SFR");
	SegClass (0XFFF00,"DATA");
	SegDefReg(0xFFF00,"RBS",0x0);
	SegDefReg(0xFFF00,"ES",0xF);
	set_segm_type(0XFFF00,3);
	add_segm_ex(0XFFFFF,0X100000,0,0,1,5,ADDSEG_NOSREG);
	SegRename(0XFFFFF,"ROM");
	SegClass (0XFFFFF,"CODE");
	SegDefReg(0xFFFFF,"ds",0x0);
	SegDefReg(0xFFFFF,"RBS",0x0);
	SegDefReg(0xFFFFF,"ES",0xF);
	set_segm_type(0XFFFFF,2);
	set_inf_attr(INF_LOW_OFF, 0x0);
	set_inf_attr(INF_HIGH_OFF, 0x100000);
}

static Enums_0(id) {

	id = add_enum(-1,"EOCDMode",0x1100000);
	set_enum_bf(id,1);
	add_enum_member(id,"ocd",	0X20,	0x20);
	return id;
}

//------------------------------------------------------------------------
// Information about enum types

static Enums(void) {
        auto id;
        begin_type_updating(UTP_ENUM);
	id = Enums_0(id);
        end_type_updating(UTP_ENUM);
}

static ApplyStrucTInfos_0(void) {
        auto id;
	id = get_struc_id("signature_data");
	id = get_struc_id("pfdl_request_t");
	id = get_struc_id("pfdl_descriptor_t");
	id = get_struc_id("maindispatcher_t");
	return id;
}

//------------------------------------------------------------------------
// Information about type information for structure members

static ApplyStrucTInfos() {
	ApplyStrucTInfos_0();
}

static Structures_0(id) {
        auto mid;

	id = add_struc(-1,"signature_data",0);
	id = add_struc(-1,"pfdl_request_t",0);
	id = add_struc(-1,"pfdl_descriptor_t",0);
	id = add_struc(-1,"maindispatcher_t",0);
	
	id = get_struc_id("signature_data");
	mid = add_struc_member(id,"device_code",	0,	0x000400,	-1,	3);
	mid = add_struc_member(id,"device_name",	0X3,	0x000400,	-1,	9);
	mid = add_struc_member(id,"field_C",	0XC,	0x000400,	-1,	3);
	mid = add_struc_member(id,"field_F",	0XF,	0x000400,	-1,	3);
	mid = add_struc_member(id,"field_12",	0X12,	0x000400,	-1,	3);
	
	id = get_struc_id("pfdl_request_t");
	mid = add_struc_member(id,"index_u16",	0,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"data_pu08",	0X2,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"bytecount_u16",	0X4,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"command_enu",	0X6,	0x000400,	-1,	1);
	
	id = get_struc_id("pfdl_descriptor_t");
	mid = add_struc_member(id,"fx_MHz_u08",	0,	0x000400,	-1,	1);
	mid = add_struc_member(id,"wide_voltage_mode_u08",	0X1,	0x000400,	-1,	1);
	
	id = get_struc_id("maindispatcher_t");
	mid = add_struc_member(id,"counter",	0,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_1",	0X1,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_2",	0X2,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_3",	0X3,	0x000400,	-1,	1);
	mid = add_struc_member(id,"addr",	0X4,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"cs",	0X6,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_7",	0X7,	0x000400,	-1,	1);
	return id;
}

//------------------------------------------------------------------------
// Information about structure types

static Structures(void) {
        auto id;
        begin_type_updating(UTP_STRUCT);
	id = Structures_0(id);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_0(void) {
        auto x;
#define id x

	update_extra_cmt		(0,	E_PREV + 0,	"; File Name   : C:\\rl78\\dump1.bin");
	update_extra_cmt		(0,	E_PREV + 1,	"; Format      : Binary file");
	update_extra_cmt		(0,	E_PREV + 2,	"; Base Address: 0000h Range: 0000h - 100000h Loaded length: 100000h");
	create_word	(x=0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(0X2);
	create_word	(0X4);
	create_word	(0X6);
	create_word	(x=0X8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(0XA);
	create_word	(0XC);
	create_word	(0XE);
	create_word	(0X10);
	create_word	(0X12);
	create_word	(0X14);
	create_word	(0X16);
	create_word	(x=0X18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X1A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(x=0X1C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(0X1E);
	create_word	(0X20);
	create_word	(0X22);
	create_word	(0X24);
	create_word	(0X26);
	create_word	(x=0X28);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(0X2A);
	create_word	(0X2C);
	create_word	(0X2E);
	create_word	(0X30);
	create_word	(x=0X32);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_word	(0X34);
	create_word	(0X36);
	create_word	(0X38);
	create_word	(0X3A);
	create_word	(0X3C);
	create_word	(0X3E);
	create_word	(0X40);
	create_word	(x=0X42);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	MakeStruct	(0X48,	"maindispatcher_t");
	MakeStruct	(0X50,	"maindispatcher_t");
	MakeStruct	(0X58,	"maindispatcher_t");
	MakeStruct	(0X60,	"maindispatcher_t");
	MakeStruct	(0X68,	"maindispatcher_t");
	create_byte	(0XC0);
	make_array	(0XC0,	0X4);
	set_name	(0XC0,	"OptionsBytes");
	create_byte	(0XC4);
	make_array	(0XC4,	0XA);
	set_name	(0XC4,	"OIDID");
	create_insn	(0XD8);
	set_name	(0XD8,	"Reset");
	update_extra_cmt		(0XF3,	E_PREV + 0,	";--------------------------------------------------");
	update_extra_cmt		(0XF3,	E_PREV + 1,	"    ; initializing stack area");
	update_extra_cmt		(0XF3,	E_PREV + 2,	"    ;--------------------------------------------------");
	update_extra_cmt		(0XF3,	E_PREV + 3,	"fe20-fee0");
	update_extra_cmt		(0XF3,	E_PREV + 4,	"");
	update_extra_cmt		(0XF3,	E_PREV + 5,	"");
	update_extra_cmt		(0XFA,	E_PREV + 0,	"");
	update_extra_cmt		(0XFA,	E_PREV + 1,	"");
	update_extra_cmt		(0XFA,	E_PREV + 2,	"");
	set_cmt	(0X104,	"kopiere \nvon 0x44-0x86 \nnach FFAD8",	0);
	create_insn	(0X104);
	update_extra_cmt		(0X10F,	E_PREV + 0,	"");
	update_extra_cmt		(0X10F,	E_PREV + 1,	"");
	update_extra_cmt		(0X10F,	E_PREV + 2,	"");
	set_cmt	(0X112,	"kopiere\n0x02 -",	0);
	create_insn	(0X117);
	update_extra_cmt		(0X127,	E_PREV + 0,	"");
	update_extra_cmt		(0X127,	E_PREV + 1,	"");
	update_extra_cmt		(0X127,	E_PREV + 2,	"");
	create_insn	(0X12F);
	update_extra_cmt		(0X136,	E_PREV + 0,	"");
	update_extra_cmt		(0X136,	E_PREV + 1,	"");
	update_extra_cmt		(0X136,	E_PREV + 2,	"");
	create_insn	(0X140);
	update_extra_cmt		(0X148,	E_PREV + 0,	"");
	update_extra_cmt		(0X148,	E_PREV + 1,	"");
	update_extra_cmt		(0X148,	E_PREV + 2,	"");
	create_insn	(0X152);
	update_extra_cmt		(0X15D,	E_PREV + 0,	"");
	update_extra_cmt		(0X15D,	E_PREV + 1,	"");
	update_extra_cmt		(0X15D,	E_PREV + 2,	"");
	create_insn	(0X165);
	update_extra_cmt		(0X16C,	E_PREV + 0,	"");
	update_extra_cmt		(0X16C,	E_PREV + 1,	"");
	update_extra_cmt		(0X16C,	E_PREV + 2,	"");
	set_name	(0X183,	"_exit");
	create_insn	(0X185);
	set_cmt	(0X187,	"Program status word/Interrupt enable",	0);
	create_insn	(0X196);
	set_name	(0X196,	"Multiply");
	set_cmt	(0X199,	"Program status word/Interrupt enable",	0);
	set_cmt	(0X19C,	"multiplicand",	0);
	set_cmt	(0X1A0,	"multiplier",	0);
	set_cmt	(0X1A3,	"product Read the product (higher 16 bits) from multiplication/division data register B (H) (MDBH).",	0);
	create_insn	(0X1C1);
	set_name	(0X1C1,	"Divide");
	set_cmt	(0X1CD,	"Program status word/Interrupt enable",	0);
	set_cmt	(0X1D0,	"Division mode (unsigned), generation of a division completion\ninterrupt (INTMD)",	0);
	set_cmt	(0X1E2,	"Starts division operation/division operation processing in progress",	0);
	create_insn	(0X1FA);
	create_insn	(0X200);
	create_insn	(0X20B);
	set_cmt	(0X20D,	"Program status word/Interrupt enable",	0);
	create_insn	(0X23C);
	set_name	(0X23C,	"devide");
	set_cmt	(0X242,	"Program status word/Interrupt enable",	0);
	create_insn	(0X26B);
	create_insn	(0X270);
	create_insn	(0X27F);
	create_insn	(0X291);
	set_name	(0X291,	"lshift32");
	create_insn	(0X2AC);
	set_name	(0X2AC,	"rshift32");
	create_insn	(0X2CB);
	set_cmt	(0X2DF,	"Pin input edge detection",	1);
	create_insn	(0X2DF);
	set_name	(0X2DF,	"INTP0");
	set_cmt	(0X2E4,	"An  interrupt  (INTIT)  is  generated  at  any  previously  specified  time  interval.",	1);
	create_insn	(0X2E4);
	set_name	(0X2E4,	"INTIT");
	create_insn	(0X2E9);
	set_name	(0X2E9,	"INTSR0");
	create_insn	(0X319);
	create_insn	(0X337);
	set_name	(0X337,	"INTSRE0");
	create_insn	(0X37C);
	set_name	(0X37C,	"INTST0");
	set_cmt	(0X39A,	"send first byte",	0);
	create_insn	(0X3A4);
	set_cmt	(0X3C0,	"End of timer channel 01 count or capture",	1);
	create_insn	(0X3C0);
	set_name	(0X3C0,	"INTTM01");
	create_insn	(0X3F5);
	create_insn	(0X418);
	create_insn	(0X422);
	create_insn	(x=0X42B);
	toggle_sign		(x,	1);
	op_hex		(x,	1);
	create_insn	(x=0X459);
	toggle_sign		(x,	1);
	op_hex		(x,	1);
	create_insn	(0X4BD);
	set_name	(0X4BD,	"INTTM07");
	create_insn	(0X4C2);
	set_name	(0X4C2,	"PFDL_Open");
	create_insn	(0X4DE);
	set_name	(0X4DE,	"PFDL_Execute");
	set_cmt	(0X4EA,	"data ptr",	0);
	set_cmt	(0X4F6,	"cmd",	0);
	set_cmt	(0X504,	"write index/address",	0);
	set_cmt	(0X50D,	"count",	0);
	create_insn	(0X521);
	create_insn	(0X532);
	create_insn	(0X545);
	set_name	(0X545,	"PFDL_Handler?");
	create_insn	(0X54A);
	set_name	(0X54A,	"PFDL_Close");
	create_insn	(x=0X558);
	op_stkvar	(x,	0);
	create_insn	(0X590);
	create_insn	(0X59B);
	create_insn	(0X59C);
	set_name	(0X59C,	"_main");
	set_cmt	(0X5A8,	"FFA00",	0);
	create_insn	(x=0X5A8);
	toggle_sign		(x,	1);
	op_hex		(x,	1);
	create_insn	(0X5B6);
	create_word	(0X200A);
	set_name	(0X200A,	"blockoffset");
	create_word	(0X200C);
	create_word	(0X200E);
	create_word	(0X2010);
	create_word	(0X2012);
	create_word	(0X2014);
	create_word	(0X2016);
	create_word	(0X2018);
	create_word	(0X201A);
	create_word	(0X201C);
	create_word	(0X201E);
	create_word	(0X2020);
	create_word	(0X2022);
	create_word	(0X2024);
	create_word	(0X2026);
	create_word	(0X2028);
	create_word	(0X202A);
	create_word	(0X202C);
	create_word	(0X202E);
	create_word	(0X2030);
	create_word	(0X2032);
	create_word	(0X2034);
	create_word	(0X2036);
	create_word	(0X2038);
	create_word	(0X203A);
	create_word	(0X203C);
	create_word	(0X203E);
	create_word	(0X2040);
	create_word	(0X2076);
	create_word	(0X2078);
	create_word	(0X207A);
	create_word	(0X207C);
	create_word	(0X207E);
	create_word	(0X2080);
	create_word	(0X2082);
	create_word	(0X2084);
	create_word	(0X2086);
	create_word	(0X2088);
	create_word	(0X208A);
	create_word	(0X208C);
	create_word	(0X208E);
	create_word	(0X2090);
	create_word	(0X2092);
	create_word	(0X2094);
	create_word	(0X2096);
	create_word	(0X2098);
	create_word	(0X209A);
	create_word	(0X209C);
	create_word	(0X209E);
	create_word	(0X20A0);
	create_word	(0X20A2);
	create_word	(0X20A4);
	create_word	(0X20A6);
	create_word	(0X20A8);
	create_word	(0X20AA);
	create_word	(0X20AC);
	create_word	(0X20AE);
	create_word	(0X20B0);
	create_word	(0X20B2);
	create_word	(0X20B4);
	create_word	(0X20B6);
	create_word	(0X20B8);
	create_word	(0X20BA);
	create_word	(0X20BC);
	create_word	(0X20BE);
	create_word	(0X20C0);
	create_word	(0X20C2);
	create_word	(0X20C4);
	create_word	(0X20C6);
	create_word	(0X20C8);
	create_word	(0X20CA);
	create_word	(0X20CC);
	create_word	(0X20CE);
	create_word	(0X20D0);
	set_cmt	(0X20D2,	"symbol 0",	0);
	update_extra_cmt		(0X20D2,	E_PREV + 0,	"");
	update_extra_cmt		(0X20D2,	E_PREV + 1,	"");
	update_extra_cmt		(0X20D2,	E_PREV + 2,	"");
	create_word	(0X20D2);
	set_cmt	(0X20D4,	"symbol 1",	0);
	create_word	(0X20D4);
	set_cmt	(0X20D6,	"symbol 2",	0);
	create_word	(0X20D6);
	create_word	(0X20D8);
	create_word	(0X20DA);
	create_word	(0X20DC);
	create_word	(0X20DE);
	create_word	(0X20E0);
	create_word	(0X20E2);
	set_cmt	(0X20E4,	"symbol 9",	0);
	create_word	(0X20E4);
	set_cmt	(0X20E6,	"symbol Minus",	0);
	create_word	(0X20E6);
	set_cmt	(0X20E8,	"symbol A",	0);
	create_word	(0X20E8);
	create_word	(0X20EA);
	set_cmt	(0X20EC,	"Symbol C",	0);
	create_word	(0X20EC);
	set_cmt	(0X20EE,	"Symbol E",	0);
	create_word	(0X20EE);
	create_word	(0X20F0);
	create_word	(0X20F2);
	create_word	(0X20F4);
	create_word	(0X20F6);
	create_word	(0X20F8);
	set_cmt	(0X20FA,	"Symbol P",	0);
	create_word	(0X20FA);
	create_word	(0X20FC);
	create_word	(0X20FE);
	set_cmt	(0X2100,	"Symbol r   pos: 0x17",	0);
	create_word	(0X2100);
	update_extra_cmt		(0X2102,	E_PREV + 0,	"");
	update_extra_cmt		(0X2102,	E_PREV + 1,	"");
	update_extra_cmt		(0X2102,	E_PREV + 2,	"");
	create_byte	(0X2102);
	create_byte	(0X211A);
	create_word	(0X21D6);
	create_word	(0X21D8);
	create_word	(0X21DA);
	create_word	(0X21DC);
	create_word	(0X21DE);
	create_word	(0X21E0);
	create_word	(0X21E2);
	create_word	(0X21E4);
	create_word	(0X21E6);
	create_word	(0X21E8);
	create_word	(0X21EA);
	create_word	(0X21EC);
	create_word	(0X21EE);
	create_word	(0X21F0);
	create_word	(0X21F2);
	create_word	(0X21F4);
	create_word	(0X21F6);
	create_word	(0X21F8);
	create_byte	(0X21FA);
	create_byte	(0X21FB);
	create_byte	(0X21FC);
	create_byte	(0X21FD);
	create_byte	(0X21FE);
	set_cmt	(0X228E,	" ADCEN = 1U;",	0);
	create_insn	(0X228E);
	set_name	(0X228E,	"R_ADC_Create");
	set_cmt	(0X22A7,	"Supplied from P20/AVREFP/ANI0",	0);
	set_cmt	(0X22B2,	"Input:\nP21/ANI1/AVREFM pin",	0);
	create_insn	(0X22B6);
	set_name	(0X22B6,	"R_ADC_Start");
	create_insn	(0X22BA);
	set_name	(0X22BA,	"R_ADC_Stop");
	create_insn	(0X22BE);
	set_name	(0X22BE,	"R_ADC_Set_Operation_On");
	create_insn	(0X22C2);
	set_name	(0X22C2,	"R_ADC_Set_Operation_Off");
	create_insn	(0X22C6);
	set_name	(0X22C6,	"R_ADC_Get_Result");
	create_insn	(0X22CF);
	set_name	(0X22CF,	"R_CGC_Create");
	create_insn	(0X22E6);
	create_insn	(0X22F2);
	set_name	(0X22F2,	"setupInterrupts");
	create_insn	(0X232F);
	create_insn	(0X2336);
	create_insn	(0X233D);
	create_insn	(0X2355);
	set_name	(0X2355,	"startTimer");
	create_insn	(0X2362);
	set_cmt	(0X236F,	"RTCEN = 1u;",	0);
	create_insn	(0X236F);
	set_name	(0X236F,	"R_LCD_Create");
	set_cmt	(0X2373,	"LCDON = 0u;",	0);
	set_cmt	(0X2376,	"_00_LCD_DISPLAY_WAVEFORM_A\n_0D_LCD_DISPLAY_MODE1",	0);
	set_cmt	(0X237D,	"Pullup off\n1.0   \n1.1\n1.2",	0);
	update_extra_cmt		(0X237D,	E_PREV + 0,	"");
	update_extra_cmt		(0X237D,	E_PREV + 1,	"");
	update_extra_cmt		(0X237D,	E_PREV + 2,	"setup pullups");
	set_cmt	(0X2385,	"Pullup off\n3.1\n3.2",	0);
	set_cmt	(0X238D,	"Pullup off\n4.1\n4.2\n4.3",	0);
	set_cmt	(0X2395,	"Pullup off\n5.0\n5.1\n5.2\n5.3\n5.4",	0);
	set_cmt	(0X239D,	"Pullup off\n7.0\n7.1\n7.2\n7.3\n7.4",	0);
	set_cmt	(0X23A5,	"12.0",	0);
	set_cmt	(0X23B0,	"14 all",	0);
	update_extra_cmt		(0X23B5,	E_PREV + 0,	"");
	update_extra_cmt		(0X23B5,	E_PREV + 1,	"");
	update_extra_cmt		(0X23B5,	E_PREV + 2,	" Port output mode ");
	update_extra_cmt		(0X23E5,	E_PREV + 0,	"");
	update_extra_cmt		(0X23E5,	E_PREV + 1,	"");
	update_extra_cmt		(0X23E5,	E_PREV + 2,	"");
	update_extra_cmt		(0X23E5,	E_PREV + 3,	"/* Set segment pins */");
	update_extra_cmt		(0X240D,	E_PREV + 0,	"");
	update_extra_cmt		(0X240D,	E_PREV + 1,	"");
	update_extra_cmt		(0X240D,	E_PREV + 2,	"/* Set the segment pins as Output */");
	update_extra_cmt		(0X2455,	E_PREV + 0,	"");
	update_extra_cmt		(0X2455,	E_PREV + 1,	"");
	update_extra_cmt		(0X2455,	E_PREV + 2,	"");
	create_insn	(0X245D);
	set_name	(0X245D,	"R_LCD_Start");
	create_insn	(0X2461);
	set_name	(0X2461,	"R_LCD_Stop");
	create_insn	(0X2465);
	set_name	(0X2465,	"setSCOC");
	create_insn	(0X2469);
	set_name	(0X2469,	"resetSCOC:");
	create_insn	(0X246D);
	set_name	(0X246D,	"_HardwareSetup");
	set_cmt	(0X2492,	"rxbuffersize",	0);
	set_cmt	(0X2496,	"rxbuffer",	0);
	create_insn	(0X24C6);
	set_name	(0X24C6,	"wait");
	create_insn	(0X24F3);
	set_cmt	(0X2502,	"Program status word/Interrupt enable",	0);
	set_cmt	(0X2506,	"PFSEG07 PFSEG06 PFSEG05 PFSEG04",	0);
	create_insn	(0X2506);
	set_name	(0X2506,	"setupLCD0");
	set_cmt	(0X250A,	"PFSEG15 PFSEG14 PFSEG13 PFSEG12 PFSEG11 PFSEG10 PFSEG09 PFSEG08",	0);
	set_cmt	(0X250E,	"PFSEG23 PFSEG22 PFSEG21 PFSEG20 PFSEG19 PFSEG18 PFSEG17 PFSEG16",	0);
	set_cmt	(0X2512,	"PFSEG31 PFSEG30 PFSEG29 ------- PFSEG27 PFSEG26 PFSEG25 PFSEG24",	0);
	set_cmt	(0X2516,	"PFSEG38 PFSEG37 PFSEG36 PFSEG35 PFSEG34 PFSEG33 PFSEG32",	0);
	set_cmt	(0X2527,	"set Input Mode:\nP1.7 \nP1.6 \nP1.5 \nP1.4 \nP1.3 \nP1.2 \nP1.1",	0);
	set_cmt	(0X252A,	"set Input Mode: \n1 1 1 1 \nP12.0  Input",	0);
	create_insn	(0X252E);
	set_name	(0X252E,	"setupSerialClock");
	create_insn	(0X2540);
	create_insn	(0X25D6);
	set_name	(0X25D6,	"enableSerial");
	set_cmt	(0X25E4,	"enable SOE0",	0);
	set_cmt	(0X25EE,	"enters the communication wait status",	0);
	create_insn	(0X2607);
	create_insn	(0X262E);
	set_name	(0X262E,	"initRxBuffer");
	create_insn	(0X2640);
	create_insn	(0X2654);
	set_name	(0X2654,	"sendUart?");
	set_cmt	(0X2663,	"returncode? 0x81",	0);
	create_insn	(0X2666);
	create_insn	(0X2688);
	create_insn	(0X2689);
	create_insn	(0X268D);
	create_insn	(0X268E);
	create_insn	(0X2692);
	set_name	(0X2692,	"R_Systeminit");
	set_cmt	(0X26C1,	"Program status word/Interrupt enable",	0);
	create_insn	(0X26C1);
	create_insn	(0X26C9);
	create_insn	(0X278D);
	set_name	(0X278D,	"startTimer_CH2");
	create_insn	(0X279E);
	create_insn	(0X27AF);
	create_insn	(0X27BF);
	set_name	(0X27BF,	"startTimer_CH7");
	create_insn	(0X27D0);
	create_insn	(0X27E1);
	create_insn	(0X27EB);
	set_name	(0X27EB,	"resetWatchdog");
	set_cmt	(0X27EF,	"16 MHz?",	0);
	create_insn	(x=0X27EF);
	op_dec		(x,	1);
	set_name	(0X27EF,	"pfdl_open");
	create_insn	(0X280A);
	set_name	(0X280A,	"j_PFDL_Close");
	create_insn	(0X280E);
	set_name	(0X280E,	"PFDL_READ_BYTES");
	set_cmt	(0X2824,	"FFAC6",	0);
	create_insn	(0X283F);
	create_insn	(0X284A);
	set_name	(0X284A,	"PFDL_VERIFY_BYTES?");
	set_cmt	(0X284F,	"PFDL_CMD_IVERIFY_BYTES?",	0);
	create_insn	(0X2877);
	create_insn	(0X2882);
	set_name	(0X2882,	"PFDL_WRITE_BYTES");
	set_cmt	(0X28A4,	"PFDL_BUSY",	0);
	create_insn	(x=0X28A4);
	toggle_sign		(x,	1);
	op_hex		(x,	1);
	create_insn	(0X28B4);
	create_insn	(0X28C1);
	set_name	(0X28C1,	"PFDL_BLANK_CHECK");
	create_insn	(0X28EE);
	create_insn	(0X28F9);
	set_name	(0X28F9,	"PFDL_ERASE_BLOCK");
	set_cmt	(0X28FB,	"request.command_enu     = PFDL_CMD_ERASE_BLOCK",	0);
	set_cmt	(0X2900,	"request.index_u16       = u16BlockNumber",	0);
	set_cmt	(0X290E,	"error == PFDL_BUSY",	0);
	create_insn	(0X291E);
	create_insn	(0X2928);
	create_insn	(0X294C);
	create_insn	(0X296A);
	set_name	(0X296A,	"setupDispatcher?");
	set_cmt	(0X2976,	"FFADD 0x49",	0);
	set_cmt	(0X2980,	"FFADC 0x48",	0);
	create_insn	(x=0X2980);
	toggle_sign		(x,	1);
	op_hex		(x,	1);
	set_cmt	(0X2987,	"decrement counter?",	0);
	set_cmt	(0X298F,	"FFADE 0x4A",	0);
	set_cmt	(0X29A0,	"counter = 1",	0);
	create_insn	(0X29A7);
	create_insn	(0X29A9);
	set_name	(0X29A9,	"Dispatcher");
	set_cmt	(0X29AF,	"0-4",	0);
	set_cmt	(0X29BF,	"FFADC 0x48",	0);
	create_insn	(x=0X29BF);
	toggle_sign		(x,	1);
	op_hex		(x,	1);
	set_cmt	(0X29D0,	"counter = 0",	0);
	create_insn	(0X29D7);
	create_insn	(0X29D9);
	set_name	(0X29D9,	"dispfcn_01");
	create_insn	(0X29ED);
	set_name	(0X29ED,	"dispfcn_02");
	create_insn	(0X29F5);
	set_name	(0X29F5,	"dispfcn_03");
	create_insn	(0X29F6);
	set_name	(0X29F6,	"dispfcn_04");
	create_insn	(0X2A19);
	create_insn	(0X2A32);
	set_name	(0X2A32,	"dispfcn_05");
	create_insn	(0X2A42);
	set_name	(0X2A42,	"ADRead");
	create_insn	(0X2A60);
	create_insn	(0X2A66);
	set_name	(0X2A66,	"readADValue");
	create_insn	(0X2A7B);
	create_insn	(0X2A88);
	create_insn	(0X2AAF);
	set_cmt	(0X2AC0,	"render Gear Symbol",	0);
	create_insn	(0X2AC9);
	create_insn	(0X2ADB);
	create_insn	(0X2AFD);
	create_insn	(0X2B1B);
	create_insn	(0X2B46);
	create_insn	(0X2B56);
	create_insn	(0X2B66);
	create_insn	(0X2B7E);
	set_name	(0X2B7E,	"initVariables");
	create_insn	(0X2BB9);
	set_name	(0X2BB9,	"resetConfiguration");
	create_insn	(0X2BE0);
	create_insn	(0X2C33);
	set_name	(0X2C33,	"storetoeeprom");
	set_cmt	(0X2C3A,	"zero crc",	0);
	set_cmt	(0X2C40,	"F2042 2042",	0);
	update_extra_cmt		(0X2C4D,	E_PREV + 0,	"");
	update_extra_cmt		(0X2C4D,	E_PREV + 1,	"increment savecounter");
	create_insn	(x=0X2C5C);
	op_hex		(x,	0);
	create_insn	(x=0X2C7C);
	op_dec		(x,	1);
	create_insn	(x=0X2CA9);
	op_dec		(x,	1);
	set_cmt	(0X2D08,	"crc len",	0);
	set_cmt	(0X2D0D,	"buffer",	0);
	set_cmt	(0X2D10,	"\np1: len\nbc: result",	1);
	create_insn	(0X2D28);
	set_name	(0X2D28,	"WriteEEPROM");
	create_insn	(x=0X2D36);
	op_dec		(x,	1);
	create_insn	(0X2D49);
	set_cmt	(0X2D5B,	"schreibe jeden Datensatz 3x\nfor i=0;i<3;i++",	0);
	create_insn	(x=0X2D60);
	op_hex		(x,	1);
	set_cmt	(0X2D62,	"AX = A*X\nBlocknummer * 0x1c",	0);
	set_cmt	(0X2D63,	"Blocknummer * 0x1c + 0x200A",	0);
	set_cmt	(0X2D67,	"0 - 0x0d",	0);
	set_cmt	(0X2D6B,	"*2",	0);
	set_cmt	(0X2D6C,	"callcount *2 + (Blocknummer * 0x1c + 0x200A)",	0);
	set_cmt	(0X2D72,	"i * 0x18",	0);
	set_cmt	(0X2D7F,	"push 0x0018 (24dez)",	0);
	create_insn	(0X2D92);
	create_insn	(0X2D9A);
	set_name	(0X2D9A,	"restoreFromEeprom");
	set_cmt	(0X2EBF,	"read TopSpeed",	0);
	create_insn	(0X2F44);
	set_name	(0X2F44,	"readFromEepromCaller");
	set_cmt	(0X2F51,	"205A",	0);
	update_extra_cmt		(0X2F5D,	E_PREV + 0,	"");
	update_extra_cmt		(0X2F5D,	E_PREV + 1,	"");
	update_extra_cmt		(0X2F5D,	E_PREV + 2,	"");
	set_cmt	(0X2F66,	"Blocknum auf 1?",	0);
	set_cmt	(0X2F6E,	"callcount auf 0d?",	0);
	set_cmt	(0X2F74,	"if break inner loop, break all",	0);
	set_cmt	(0X2F7A,	"BC = 1",	0);
	set_cmt	(0X2FA0,	"here it breaks the loop",	0);
	update_extra_cmt		(0X2FA2,	E_PREV + 0,	"");
	update_extra_cmt		(0X2FA2,	E_PREV + 1,	"take newest values");
	create_insn	(0X2FB6);
	create_insn	(0X2FBB);
	create_insn	(0X2FC3);
	set_name	(0X2FC3,	"readFromEeprom");
	set_cmt	(0X2FE2,	"0x18",	0);
	set_cmt	(0X2FE4,	"Stack + 38",	1);
	set_cmt	(0X2FF5,	"buffer + skip crc bytes",	0);
	create_insn	(0X30BD);
	create_insn	(0X30FA);
	create_insn	(0X3137);
	create_insn	(0X31A2);
	create_insn	(0X31AE);
	create_insn	(0X31C5);
	create_insn	(0X31D9);
	create_insn	(0X31EE);
	create_insn	(0X3202);
	create_insn	(0X3217);
	set_name	(0X3217,	"limitGearRatio");
	create_insn	(0X322B);
	create_insn	(0X3240);
	set_name	(0X3240,	"calc_crc16");
	create_insn	(0X3260);
	create_insn	(0X326B);
	create_insn	(0X3272);
	create_insn	(0X3277);
	create_insn	(0X327C);
	create_insn	(0X3286);
	create_insn	(0X328F);
	create_insn	(0X3299);
	create_insn	(0X32A2);
	create_insn	(0X32A3);
	create_insn	(0X32AE);
	create_insn	(0X330B);
	create_insn	(0X3310);
	create_insn	(0X3314);
	create_insn	(0X3327);
	create_insn	(0X339E);
	create_insn	(0X33A4);
	create_insn	(0X33A8);
	set_name	(0X33A8,	"handleButtons");
	set_cmt	(0X33AC,	"0 speed Mode",	0);
	set_cmt	(0X33AF,	"1 Trip Mode",	0);
	set_cmt	(0X33B5,	"7",	0);
	create_insn	(0X33B8);
	set_cmt	(0X33BC,	"16",	0);
	create_insn	(x=0X33BF);
	op_dec		(x,	1);
	set_cmt	(0X33C3,	"32",	0);
	create_insn	(0X33C6);
	set_cmt	(0X33C9,	"33  Gear Ratio Mode",	0);
	create_insn	(0X33CC);
	create_insn	(0X33CD);
	set_cmt	(0X33D7,	"speed == 0 ?",	0);
	create_insn	(0X33F2);
	create_insn	(0X33FE);
	create_insn	(0X340A);
	create_insn	(0X3415);
	create_insn	(0X3434);
	create_insn	(0X3440);
	create_insn	(0X344C);
	create_insn	(0X3470);
	create_insn	(0X348A);
	create_insn	(0X34A4);
	create_insn	(0X34BE);
	create_insn	(0X34D7);
	create_insn	(0X34F0);
	create_insn	(0X3504);
	create_insn	(0X351C);
	create_insn	(0X3530);
	create_insn	(0X3544);
	create_insn	(0X355D);
	create_insn	(0X3571);
	create_insn	(0X359E);
	create_insn	(0X35AB);
	create_insn	(0X35B8);
	create_insn	(0X35D2);
	set_name	(0X35D2,	"incrementGearRatio");
	create_insn	(0X35EA);
	set_name	(0X35EA,	"decrementGearRatio");
	create_insn	(0X3602);
	create_insn	(0X362B);
	create_insn	(0X3659);
	create_insn	(x=0X3673);
	op_dec		(x,	1);
	create_insn	(0X3684);
	create_insn	(0X36A9);
	create_insn	(0X36AF);
	create_insn	(0X36C5);
	create_insn	(0X36CD);
	create_insn	(0X36EE);
	create_insn	(0X372F);
	create_insn	(0X3738);
	create_insn	(x=0X373E);
	toggle_sign		(x,	1);
	op_hex		(x,	1);
	create_insn	(0X374E);
	create_insn	(0X3759);
	create_insn	(0X3772);
	create_insn	(0X3789);
	create_insn	(0X37B5);
	set_cmt	(0X37C7,	"FFB56",	0);
	set_cmt	(0X37D8,	"ffb5a",	0);
	set_cmt	(0X37EF,	"no button",	0);
	create_insn	(0X37EF);
	set_name	(0X37EF,	"handelButtonsPre");
	create_insn	(x=0X3817);
	op_dec		(x,	1);
	set_cmt	(0X383F,	"right button holded?",	0);
	create_insn	(0X383F);
	set_cmt	(0X3868,	"start gear mode",	0);
	create_insn	(x=0X3868);
	op_dec		(x,	1);
	set_cmt	(0X3888,	"left button holded?",	0);
	create_insn	(0X3888);
	update_extra_cmt		(0X388E,	E_PREV + 0,	"");
	update_extra_cmt		(0X388E,	E_PREV + 1,	"switch km <> miles");
	update_extra_cmt		(0X388E,	E_PREV + 2,	"");
	update_extra_cmt		(0X388E,	E_PREV + 3,	"Zwischen KMH und MPH umschalten: Zum Umschalten drücken und halten Sie den linken Knopf, während Sie den Schlüssel ");
	create_insn	(0X389B);
	create_insn	(0X38A3);
	create_insn	(0X38D8);
	create_insn	(0X38E1);
	set_cmt	(0X38ED,	"for 0 to 4",	0);
	create_insn	(x=0X3907);
	toggle_sign		(x,	1);
	op_hex		(x,	1);
	create_insn	(0X3912);
	create_insn	(0X391A);
	create_insn	(0X392A);
	create_insn	(0X395A);
	create_insn	(0X397A);
	create_insn	(0X399B);
	create_insn	(0X399F);
	create_insn	(0X39AE);
	create_insn	(0X39B2);
	create_insn	(0X39D7);
	create_insn	(0X39F2);
	create_insn	(0X39FB);
	create_insn	(0X3A04);
	set_cmt	(0X3A09,	"enable Surron Label",	0);
	set_cmt	(0X3A11,	"enable Bottom Line",	0);
	create_insn	(x=0X3A1B);
	op_dec		(x,	1);
	create_insn	(0X3A3C);
	create_insn	(0X3A50);
	create_insn	(0X3A55);
	create_insn	(0X3A5A);
	set_cmt	(0X3ABC,	"render Surron Label",	1);
	set_cmt	(0X3AC1,	"enable Surron Label",	0);
	set_cmt	(0X3AC4,	"render Line Bottom",	1);
	set_cmt	(0X3AC9,	"render Line Bottom",	0);
	create_insn	(0X3AD1);
	create_insn	(0X3AD6);
	set_cmt	(0X3AE9,	"1",	0);
	set_cmt	(0X3AEF,	"7",	0);
	create_insn	(0X3AF2);
	set_cmt	(0X3AF6,	"16",	0);
	create_insn	(0X3AF9);
	create_insn	(0X3B00);
	create_insn	(0X3B06);
	create_insn	(0X3B0D);
	create_insn	(0X3B14);
	create_insn	(0X3B1B);
	create_insn	(0X3B1E);
	set_cmt	(0X3B38,	"Distance Segment B(EGF)",	0);
	set_cmt	(0X3B44,	"Distance Segment A(EGF)",	0);
	set_cmt	(0X3B51,	"enable Trip Symbol",	0);
	set_cmt	(0X3B77,	"write\"Er-\"",	1);
	create_insn	(0X3B77);
	create_insn	(0X3BCB);
	create_insn	(0X3BD1);
	create_insn	(0X3BDA);
	create_insn	(0X3BE3);
	create_insn	(0X3BEC);
	create_insn	(0X3BF2);
	set_cmt	(0X3C21,	"enableTotalSymbol",	0);
	create_insn	(0X3C38);
	create_insn	(x=0X3C47);
	toggle_sign		(x,	1);
	op_hex		(x,	1);
	create_insn	(x=0X3C70);
	op_dec		(x,	1);
	create_insn	(0X3C85);
	create_insn	(0X3CA5);
	create_insn	(0X3CB6);
	create_insn	(0X3CE0);
	create_insn	(0X3CE4);
	create_insn	(0X3CFF);
	create_insn	(0X3D01);
	set_name	(0X3D01,	"renderSpeedSegment");
	set_cmt	(0X3D22,	"enable MaxSybole",	0);
	set_cmt	(0X3D25,	"render TopSpeed on LCD?",	0);
	create_insn	(0X3D32);
	create_insn	(x=0X3D45);
	op_dec		(x,	1);
	create_insn	(x=0X3D4A);
	op_dec		(x,	1);
	set_cmt	(0X3D54,	"rxbuffer6",	0);
	create_insn	(0X3D54);
	set_name	(0X3D54,	"doLCDStuff1");
	set_cmt	(0X3D5A,	"1",	0);
	create_insn	(0X3D5D);
	set_cmt	(0X3D60,	"2",	0);
	create_insn	(0X3D63);
	set_cmt	(0X3D67,	"4",	0);
	create_insn	(0X3D6A);
	set_cmt	(0X3D6E,	"8",	0);
	create_insn	(0X3D71);
	set_cmt	(0X3D75,	"16",	0);
	create_insn	(x=0X3D78);
	op_dec		(x,	1);
	set_cmt	(0X3D7A,	"32",	0);
	create_insn	(x=0X3D7C);
	op_dec		(x,	1);
	set_cmt	(0X3D7E,	"64",	0);
	create_insn	(x=0X3D80);
	op_dec		(x,	1);
	set_cmt	(0X3D84,	"128",	0);
	set_cmt	(0X3D87,	"256",	0);
	create_insn	(0X3D87);
	create_insn	(0X3DB1);
	create_insn	(0X3DDB);
	create_insn	(0X3E05);
	create_insn	(0X3E30);
	create_insn	(0X3E5C);
	create_insn	(0X3E86);
	create_insn	(0X3EB0);
	set_cmt	(0X3EC1,	"1",	0);
	set_cmt	(0X3EC2,	"Speed Segment B(EGF) + KM/H Symbol",	0);
	set_cmt	(0X3ECA,	"Symbol P",	0);
	set_cmt	(0X3ECD,	"0x14",	0);
	set_cmt	(0X3ECE,	"Speed Segment 1 + A(EGF)",	0);
	create_insn	(0X3EDA);
	create_insn	(0X3EDE);
	set_name	(0X3EDE,	"writeNumberToSpeedSegment");
	create_insn	(0X3F31);
	set_name	(0X3F31,	"LCD_SetGear");
	create_insn	(x=0X3F34);
	op_dec		(x,	1);
	create_insn	(x=0X3F39);
	op_dec		(x,	1);
	set_cmt	(0X3F45,	"Gear Segment B(EGF)",	0);
	set_cmt	(0X3F55,	"Gear Segment A(EGF) + MPH Symbol",	0);
	set_cmt	(0X3F5D,	"Gear Symbol",	0);
	set_cmt	(0X3F62,	"Gear Symbol",	0);
	create_insn	(0X3F6F);
	create_insn	(x=0X3F77);
	op_dec		(x,	1);
	create_insn	(x=0X3F7C);
	op_dec		(x,	1);
	create_insn	(x=0X3F81);
	op_dec		(x,	1);
	create_insn	(x=0X3F86);
	op_dec		(x,	1);
	set_cmt	(0X3F99,	"Distance Segment F(EGF)",	0);
	create_insn	(0X3FAF);
	create_insn	(0X3FC3);
	set_name	(0X3FC3,	"LCD_SetBatteryPercentage");
	create_insn	(x=0X3FCB);
	op_dec		(x,	1);
	set_cmt	(0X3FD0,	"ensure max 100%",	0);
	create_insn	(x=0X3FD0);
	op_dec		(x,	1);
	set_cmt	(0X3FDA,	"remove leading 1",	0);
	update_extra_cmt		(0X3FDD,	E_PREV + 0,	"");
	update_extra_cmt		(0X3FDD,	E_PREV + 1,	"");
	update_extra_cmt		(0X3FDD,	E_PREV + 2,	"");
	set_cmt	(0X3FE1,	"F0400",	0);
	set_cmt	(0X3FE4,	"write first segment element",	0);
	update_extra_cmt		(0X3FE8,	E_PREV + 0,	"");
	update_extra_cmt		(0X3FE8,	E_PREV + 1,	"");
	update_extra_cmt		(0X3FE8,	E_PREV + 2,	"");
	create_insn	(x=0X3FEB);
	op_dec		(x,	1);
	update_extra_cmt		(0X3FF0,	E_PREV + 0,	"");
	update_extra_cmt		(0X3FF0,	E_PREV + 1,	"");
	set_cmt	(0X3FF3,	"F0402",	0);
	set_cmt	(0X3FF6,	"write second segment element",	0);
	update_extra_cmt		(0X3FFB,	E_PREV + 0,	"");
	update_extra_cmt		(0X3FFB,	E_PREV + 1,	"");
	update_extra_cmt		(0X3FFB,	E_PREV + 2,	"");
	create_insn	(x=0X3FFD);
	op_dec		(x,	1);
	create_insn	(x=0X4004);
	op_dec		(x,	1);
	set_cmt	(0X400B,	"level / 10",	0);
	create_insn	(x=0X400B);
	op_dec		(x,	1);
	set_cmt	(0X4013,	"F0400",	0);
	set_cmt	(0X401D,	"if 100% set leading 1 segment",	0);
	create_insn	(x=0X401D);
	op_dec		(x,	1);
	create_insn	(0X403E);
	set_name	(0X403E,	"LCD_SetBatteryLevel");
	create_insn	(x=0X403F);
	op_dec		(x,	1);
	create_insn	(x=0X4049);
	op_dec		(x,	1);
	create_insn	(x=0X4053);
	op_dec		(x,	1);
	create_insn	(x=0X405D);
	op_dec		(x,	1);
	create_insn	(0X4067);
	create_insn	(0X4071);
	create_insn	(0X40A3);
	create_insn	(0X40B9);
	create_insn	(0X40CD);
	create_insn	(0X40E1);
	create_insn	(0X40E6);
	create_insn	(0X4108);
	create_insn	(0X4124);
	set_name	(0X4124,	"lcd_rendersymbol_km_miles");
	create_insn	(0X413A);
	create_insn	(0X414B);
	set_name	(0X414B,	"convert_KM_to_Miles");
	set_cmt	(0X415E,	"*100",	0);
	create_insn	(x=0X415E);
	op_dec		(x,	1);
	set_cmt	(0X4163,	"AX= 0\nFFED8 = HL\nFFEDC = 0x64\nFFEDA = HL+2",	0);
	set_cmt	(0X4166,	": 161",	0);
	create_insn	(x=0X4166);
	op_dec		(x,	1);
	create_insn	(0X417E);
	create_insn	(0X41F8);
	create_insn	(0X4200);
	create_insn	(0X4227);
	create_insn	(0X425B);
	create_insn	(0X4290);
	create_insn	(0X42E1);
	create_insn	(0X430C);
	create_insn	(0X4333);
	create_insn	(0X434E);
	create_insn	(0X4367);
	create_insn	(0X4384);
	create_insn	(0X43A1);
	create_insn	(0X43A6);
	set_name	(0X43A6,	"lcdmapping1?");
	set_cmt	(0X43AB,	"AX: 20A6",	0);
	set_cmt	(0X43AD,	"0418",	0);
	set_cmt	(0X43AF,	"?",	0);
	set_cmt	(0X43B0,	"8",	0);
	set_cmt	(0X43BA,	"20D2",	0);
	set_cmt	(0X43D0,	"20D3",	0);
	update_extra_cmt		(0X43DD,	E_PREV + 0,	"void FUN_ram_0043dd(byte **param_1,byte param_2)");
	update_extra_cmt		(0X43DD,	E_PREV + 1,	"");
	update_extra_cmt		(0X43DD,	E_PREV + 2,	"{");
	update_extra_cmt		(0X43DD,	E_PREV + 3,	"  **param_1 = **param_1 & DAT_near_211a;");
	update_extra_cmt		(0X43DD,	E_PREV + 4,	"  **param_1 = **param_1 | (&DAT_near_2106)[((uint)param_2 << 8) >> 7];");
	update_extra_cmt		(0X43DD,	E_PREV + 5,	"  *param_1[1] = (&DAT_near_2107)[((uint)param_2 << 8) >> 7];");
	update_extra_cmt		(0X43DD,	E_PREV + 6,	"  return;");
	update_extra_cmt		(0X43DD,	E_PREV + 7,	"}");
	create_insn	(0X43DD);
	set_name	(0X43DD,	"lcdmapping2?");
	set_cmt	(0X43F1,	"2106",	0);
	set_cmt	(0X4407,	"2107",	0);
	create_insn	(0X4414);
	set_name	(0X4414,	"LCD_SetAllSegments");
	set_cmt	(0X441B,	"F400",	0);
	create_insn	(0X4437);
	create_insn	(0X443B);
	create_insn	(0X4487);
	create_insn	(0X44C6);
	create_insn	(x=0X44E7);
	op_dec		(x,	1);
	create_insn	(x=0X44EB);
	op_dec		(x,	1);
	create_insn	(0X454D);
	create_insn	(0X45CF);
	set_name	(0X45CF,	"setMaxSpeed");
	set_cmt	(0X45D2,	"limit maxspeed to 199",	0);
	create_insn	(x=0X45D2);
	op_dec		(x,	1);
	create_insn	(x=0X45D7);
	op_dec		(x,	1);
	create_insn	(0X45EA);
	create_insn	(x=0X45F3);
	op_dec		(x,	1);
	create_insn	(x=0X4601);
	op_dec		(x,	1);
	create_insn	(0X4610);
	create_insn	(0X461B);
	create_insn	(0X4651);
	create_insn	(0X4695);
	create_insn	(x=0X46A0);
	op_dec		(x,	1);
	create_insn	(x=0X46A9);
	op_dec		(x,	1);
	create_insn	(0X46C9);
	create_insn	(0X46D0);
	create_insn	(0X46EF);
	create_insn	(0X46F4);
	create_insn	(x=0X4707);
	op_dec		(x,	1);
	create_insn	(x=0X4720);
	op_dec		(x,	1);
	create_insn	(0X478F);
	create_insn	(x=0X4799);
	op_dec		(x,	1);
	create_insn	(0X47B0);
	set_name	(0X47B0,	"incrementTripDistance");
	create_insn	(x=0X47C7);
	op_dec		(x,	1);
	create_insn	(0X47D3);
	set_name	(0X47D3,	"incrementDistance16bit");
	create_insn	(x=0X47EA);
	op_dec		(x,	1);
	create_insn	(0X47F6);
	create_insn	(x=0X484B);
	toggle_sign		(x,	1);
	op_hex		(x,	1);
	create_insn	(x=0X485A);
	toggle_sign		(x,	1);
	op_hex		(x,	1);
	create_insn	(0X4868);
	create_insn	(0X486A);
	create_insn	(0X4877);
	create_insn	(0X4882);
	create_insn	(0X4887);
	set_name	(0X4887,	"EnterStopMode");
	create_insn	(0X4896);
	create_insn	(0X4898);
	create_insn	(0X48DF);
	create_insn	(0X4910);
	create_insn	(0X4927);
	create_insn	(0X4937);
	create_insn	(0X4942);
	create_insn	(0X494A);
	create_insn	(0X4971);
	create_insn	(0X4981);
	create_insn	(0X49AD);
	create_insn	(0X49C5);
	create_insn	(0X49ED);
	create_insn	(0X4A27);
	create_insn	(0X4A5D);
	create_insn	(0X4A7C);
	create_insn	(0X4A90);
	create_insn	(0X4A9B);
	create_insn	(0X4AD2);
	create_insn	(0X4B00);
	create_insn	(0X4B05);
	create_insn	(0X4B2F);
	create_insn	(0X4B5D);
	create_insn	(0X4B92);
	create_insn	(0X4BAA);
	create_insn	(0X4BE2);
	create_insn	(0X4C1A);
	create_insn	(0X4C22);
	create_insn	(0X4C59);
	create_insn	(0X4C77);
	create_insn	(0X4CAD);
	create_insn	(0X4CCB);
	create_insn	(0X4CD6);
	create_insn	(0X4CEB);
	create_insn	(0X4CF2);
	create_insn	(0X4CF9);
	create_insn	(0X4D00);
	create_insn	(0X4D03);
	create_insn	(0X4D36);
	create_insn	(0X4D69);
	create_insn	(0X4D87);
	create_insn	(0X4DC7);
	create_insn	(0X4DE5);
	create_insn	(x=0X4DE6);
	toggle_sign		(x,	1);
	op_hex		(x,	1);
	create_insn	(0X4E1F);
	create_insn	(0X4E36);
	create_insn	(0X4E64);
	create_insn	(x=0X4E6A);
	toggle_sign		(x,	1);
	op_hex		(x,	1);
	create_insn	(0X4E78);
	create_insn	(x=0X4E79);
	toggle_sign		(x,	1);
	op_hex		(x,	1);
	create_insn	(0X4EB4);
	create_insn	(0X4ECF);
	create_insn	(0X4ED5);
	create_insn	(0X4ED6);
	create_insn	(0X4EF1);
	create_insn	(0X4EFC);
	create_insn	(0X4F19);
	create_insn	(0X4F25);
	create_insn	(0X4F41);
	create_insn	(0X4F4D);
	create_insn	(0X4F69);
	create_insn	(0X4F73);
	create_insn	(x=0X4F76);
	op_dec		(x,	1);
	create_insn	(x=0X4F80);
	op_dec		(x,	1);
	create_insn	(0X4F8B);
	create_insn	(x=0X4FA1);
	op_dec		(x,	1);
	create_insn	(x=0X4FAB);
	toggle_sign		(x,	1);
	op_hex		(x,	1);
	set_name	(0X4FAB,	"gettime");
	create_insn	(0X4FC1);
	set_name	(0X4FC1,	"settime1");
	create_insn	(0X4FCF);
	set_name	(0X4FCF,	"settime");
	create_insn	(0X4FDF);
	set_name	(0X4FDF,	"unknow_uart_rx");
	create_insn	(0X4FF0);
	create_insn	(0X4FFB);
	create_insn	(0X5006);
	create_insn	(0X5011);
	create_insn	(0X501C);
	create_insn	(0X513A);
	create_insn	(x=0X517B);
	op_dec		(x,	1);
	create_insn	(0X51A3);
	create_insn	(0X51E7);
	create_insn	(0X5239);
	set_name	(0X5239,	"process_uart_msgframe");
	set_cmt	(0X5247,	"FFBD7",	0);
	create_insn	(x=0X5247);
	toggle_sign		(x,	1);
	op_hex		(x,	1);
	create_insn	(0X5251);
	set_cmt	(0X5256,	"FFBD7",	0);
	update_extra_cmt		(0X5268,	E_PREV + 0,	"");
	update_extra_cmt		(0X5268,	E_PREV + 1,	"");
	update_extra_cmt		(0X5268,	E_PREV + 2,	"do cmd check");
	create_insn	(0X527B);
	create_insn	(0X528E);
	create_insn	(0X5294);
	set_name	(0X5294,	"handle_cmd_48");
	set_cmt	(0X529D,	"Battery Percent?",	0);
	create_insn	(0X534A);
	set_name	(0X534A,	"handle_cmd_4B");
	create_insn	(0X535B);
	create_insn	(0X539F);
	create_insn	(0X53AA);
	create_insn	(x=0X53C8);
	toggle_sign		(x,	1);
	op_hex		(x,	1);
	create_insn	(0X5419);
	create_insn	(0X5421);
	create_insn	(0X5441);
	create_insn	(0X5470);
	create_insn	(0X5483);
	create_insn	(0X5499);
	create_insn	(0X54A4);
	create_insn	(0X54B5);
	create_insn	(0X54BA);
	create_insn	(0X54BF);
	create_insn	(0X54ED);
	create_insn	(0X54EF);
	create_insn	(0X551A);
	create_insn	(0X5554);
	create_insn	(0X557D);
	create_insn	(0X55CF);
	create_insn	(0X5601);
	create_insn	(0X560F);
	set_name	(0X560F,	"resetUartBuffer");
	update_extra_cmt		(0X5619,	E_PREV + 0,	"reset uart");
	create_insn	(0X5624);
	set_name	(0X5624,	"zero_uart_rx_buffer");
	create_insn	(0X5634);
	create_insn	(0X5636);
	create_insn	(0X5646);
	create_insn	(0X5648);
	set_name	(0X5648,	"HandleUart");
	set_cmt	(0X564C,	"if 0 ->",	0);
	set_cmt	(0X5650,	"if 0x10 ->",	0);
	set_cmt	(0X5654,	"if 0x20 ->",	0);
	set_cmt	(0X5658,	"if 0x30 ->",	0);
	set_cmt	(0X565C,	"check 1. byte of rx buffer\nif it not 0x57, reset rx buffer",	0);
	create_insn	(0X565C);
	create_insn	(0X566B);
	set_cmt	(0X5670,	"check 2. byte of rx buffer\nif it not 0x83, reset rx buffer",	0);
	create_insn	(x=0X5670);
	toggle_sign		(x,	1);
	op_hex		(x,	1);
	create_insn	(0X567F);
	set_cmt	(0X5684,	"after the first two bytes are:\n0x57 0x83\nmaybe the header of a frame\n\n57 83 LEN CMD D1 D2 .. Dn CS",	1);
	create_insn	(0X5684);
	set_cmt	(0X5693,	"message complete?",	0);
	update_extra_cmt		(0X5699,	E_PREV + 0,	"");
	update_extra_cmt		(0X5699,	E_PREV + 1,	"reset rxbuffer");
	set_cmt	(0X569D,	"FFBD7",	0);
	create_insn	(0X56A8);
	create_insn	(0X56BA);
	create_insn	(0X56BF);
	set_name	(0X56BF,	"resetUartBufferCall");
	create_insn	(0X56DB);
	set_name	(0X56DB,	"read_frame_len");
	create_insn	(0X56E4);
	create_insn	(0X56F0);
	create_byte	(0X73F4);
	create_insn	(0X80D8);
	create_insn	(0X8104);
	create_insn	(0X8117);
	create_insn	(0X812F);
	create_insn	(0X8140);
	create_insn	(0X8152);
	create_insn	(0X8165);
	create_insn	(0X8185);
	set_cmt	(0X8187,	"Program status word/Interrupt enable",	0);
	create_insn	(0X8196);
	set_cmt	(0X8199,	"Program status word/Interrupt enable",	0);
	create_insn	(0X81C1);
	set_cmt	(0X81CD,	"Program status word/Interrupt enable",	0);
	create_insn	(0X81FA);
	create_insn	(0X8200);
	create_insn	(0X820B);
	set_cmt	(0X820D,	"Program status word/Interrupt enable",	0);
	create_insn	(0X823C);
	set_cmt	(0X8242,	"Program status word/Interrupt enable",	0);
	create_insn	(0X826B);
	create_insn	(0X8270);
	create_insn	(0X827F);
	create_insn	(0X8291);
	create_insn	(0X82AC);
	create_insn	(0X82CB);
	create_insn	(0X82DF);
	create_insn	(0X82E4);
	create_insn	(0X82E9);
	create_insn	(0X8319);
	create_insn	(0X8337);
	create_insn	(0X837C);
	create_insn	(0X83A4);
	create_insn	(0X83C0);
	create_insn	(0X83F5);
	create_insn	(0X8418);
	create_insn	(0X8422);
	create_insn	(0X84BD);
	create_insn	(0X84C2);
	create_insn	(0X84DE);
	create_insn	(0X8521);
	create_insn	(0X8532);
	create_insn	(0X8545);
	create_insn	(0X854A);
	create_insn	(0X8558);
	create_insn	(0X8590);
	create_insn	(0X859B);
	create_insn	(0X859C);
	create_insn	(0X85B6);
	update_extra_cmt		(0XFADC,	E_PREV + 0,	"");
	update_extra_cmt		(0XFADC,	E_PREV + 1,	"");
	update_extra_cmt		(0XFADC,	E_PREV + 2,	"Dispatcher @ 29BF");
	create_insn	(0XEF004);
	set_cmt	(0XEF012,	"Command_Offsets",	0);
	create_word	(0XEF012);
	create_word	(0XEF014);
	create_word	(0XEF016);
	set_cmt	(0XEF018,	"EF573    blockerase",	0);
	create_word	(0XEF018);
	create_word	(0XEF01A);
	set_cmt	(0XEF01C,	"EF478    prog",	0);
	create_word	(0XEF01C);
	create_word	(0XEF01E);
	create_word	(0XEF020);
	create_word	(0XEF022);
	create_word	(0XEF024);
	create_word	(0XEF026);
	set_cmt	(0XEF028,	"EF83C",	0);
	update_extra_cmt		(0XEF028,	E_PREV + 0,	"");
	update_extra_cmt		(0XEF028,	E_PREV + 1,	"Flash Commands:");
	create_word	(0XEF028);
	create_word	(0XEF02A);
	create_word	(0XEF02C);
	create_word	(0XEF02E);
	create_word	(0XEF030);
	create_word	(0XEF032);
	create_word	(0XEF034);
	create_word	(0XEF036);
	create_word	(0XEF038);
	create_word	(0XEF03A);
	create_word	(0XEF03C);
	create_word	(0XEF03E);
	create_word	(0XEF040);
	create_word	(0XEF042);
	update_extra_cmt		(0XEF044,	E_PREV + 0,	"");
	update_extra_cmt		(0XEF044,	E_PREV + 1,	"Command IDs");
	set_name	(0XEF044,	"Rom_Commands");
	update_extra_cmt		(0XEF04F,	E_PREV + 0,	"");
	update_extra_cmt		(0XEF04F,	E_PREV + 1,	"");
	update_extra_cmt		(0XEF04F,	E_PREV + 2,	"Flash Command IDs");
	create_insn	(0XEF05E);
	create_insn	(0XEF065);
	set_name	(0XEF065,	"delayX");
	create_insn	(0XEF069);
	create_insn	(0XEF0B7);
	create_insn	(0XEF0E4);
	create_insn	(0XEF0F5);
	create_insn	(0XEF0F8);
	create_insn	(0XEF140);
	create_insn	(0XEF143);
	create_insn	(0XEF152);
	create_insn	(0XEF175);
	create_insn	(0XEF1B6);
	create_insn	(0XEF1E0);
	create_insn	(0XEF226);
	create_insn	(0XEF23A);
	create_insn	(0XEF290);
	create_insn	(0XEF2DC);
	create_insn	(0XEF305);
	create_insn	(0XEF308);
	create_insn	(0XEF30E);
	create_insn	(0XEF344);
	set_cmt	(0XEF347,	"Program status word/Interrupt enable",	0);
	create_insn	(x=0XEF380);
	toggle_sign		(x,	1);
	op_hex		(x,	1);
	create_insn	(0XEF389);
	create_insn	(x=0XEF396);
	toggle_sign		(x,	1);
	op_hex		(x,	1);
	create_insn	(0XEF3A4);
	create_insn	(0XEF3CE);
	set_cmt	(0XEF3D6,	"Program status word/Interrupt enable",	0);
	create_insn	(0XEF3D6);
	set_cmt	(0XEF401,	"Program status word/Interrupt enable",	0);
	create_insn	(0XEF43F);
	set_cmt	(0XEF44C,	"EF043",	0);
	set_name	(0XEF454,	"rom_search_command");
	create_insn	(0XEF464);
	set_cmt	(0XEF467,	"EF012",	0);
	create_insn	(0XEF46F);
	create_insn	(0XEF473);
	create_insn	(0XEF478);
	set_name	(0XEF478,	"Programming?");
	create_insn	(0XEF484);
	create_insn	(0XEF4BC);
	create_insn	(0XEF4F3);
	create_insn	(0XEF4FB);
	create_insn	(0XEF502);
	create_insn	(0XEF50A);
	create_insn	(0XEF519);
	create_insn	(0XEF528);
	create_insn	(0XEF573);
	set_name	(0XEF573,	"blockerase");
	create_insn	(0XEF598);
	create_insn	(0XEF5A9);
	create_insn	(0XEF5DA);
	create_insn	(0XEF5EE);
	create_insn	(0XEF630);
	create_insn	(0XEF635);
	create_insn	(0XEF667);
	create_insn	(0XEF679);
	create_insn	(0XEF682);
	create_insn	(0XEF6B6);
	create_insn	(0XEF6D8);
	set_cmt	(0XEF6E5,	"Program status word/Zero flag",	0);
	create_insn	(0XEF70D);
	create_insn	(0XEF710);
	create_insn	(0XEF77E);
	create_insn	(0XEF784);
	create_insn	(0XEF791);
	create_insn	(0XEF79F);
	set_cmt	(0XEF7D6,	"PFDL_Execute",	0);
	create_insn	(0XEF7D6);
	set_name	(0XEF7D6,	"internalFlashRom");
	set_cmt	(0XEF7FC,	"EF04E",	0);
	create_insn	(0XEF81D);
	set_cmt	(0XEF820,	"EF028",	0);
	create_insn	(0XEF83C);
	create_insn	(0XEF869);
	create_insn	(0XEF87B);
	create_insn	(0XEF891);
	create_insn	(0XEF896);
	create_insn	(0XEF8A9);
	create_insn	(0XEF8AF);
	create_insn	(0XEF8BD);
	create_insn	(0XEF8C3);
	create_insn	(0XEF8E0);
	create_insn	(0XEF8E4);
	create_insn	(0XEF8EE);
	create_insn	(0XEF905);
	create_insn	(0XEF909);
	create_insn	(0XEF91A);
	create_insn	(0XEF91E);
	create_insn	(0XEF933);
	create_insn	(0XEF93C);
	create_insn	(0XEF940);
	create_insn	(0XEF966);
	create_insn	(0XEF9A3);
	create_insn	(0XEF9DE);
	set_cmt	(0XEF9E1,	"EFE2a",	0);
	create_insn	(0XEF9E9);
	create_insn	(0XEFA13);
	create_insn	(0XEFA59);
	create_insn	(0XEFA6A);
	create_insn	(0XEFA72);
	create_insn	(0XEFA7B);
	create_insn	(0XEFAB3);
	create_insn	(0XEFABC);
	create_insn	(0XEFAFF);
	create_insn	(0XEFB08);
	create_insn	(0XEFB64);
	create_insn	(0XEFB76);
	create_insn	(0XEFB89);
	create_insn	(0XEFB8F);
	create_insn	(0XEFBA2);
	create_insn	(0XEFBA6);
	set_cmt	(0XEFBE8,	"Program status word/Zero flag",	0);
	create_insn	(0XEFBEC);
	set_cmt	(0XEFBEE,	"Program status word/Zero flag",	0);
	create_insn	(0XEFBF5);
	set_cmt	(0XEFBF7,	"Program status word/Zero flag",	0);
	create_insn	(0XEFBFE);
	set_name	(0XEFBFE,	"tool_rx");
	create_insn	(0XEFC08);
	set_cmt	(0XEFC32,	"Program status word/Interrupt enable",	0);
	create_insn	(0XEFC36);
	set_cmt	(0XEFC40,	"Program status word/Interrupt enable",	0);
	create_insn	(0XEFC6A);
	set_cmt	(0XEFC7E,	"Program status word/Zero flag",	0);
	create_insn	(0XEFC82);
	set_cmt	(0XEFC84,	"Program status word/Zero flag",	0);
	create_insn	(0XEFC88);
	set_cmt	(0XEFC8A,	"Program status word/Zero flag",	0);
	create_insn	(0XEFC8E);
	create_insn	(0XEFC98);
	create_insn	(0XEFCCC);
	create_insn	(0XEFCD7);
	create_insn	(0XEFD14);
	create_insn	(0XEFD17);
	create_insn	(0XEFD2D);
	create_insn	(0XEFD30);
	create_insn	(0XEFD45);
	create_insn	(0XEFD4F);
	create_insn	(0XEFD59);
	create_insn	(0XEFD60);
	create_insn	(0XEFD68);
	create_insn	(0XEFD6F);
	create_insn	(0XEFD7B);
	create_insn	(0XEFD94);
	create_insn	(0XEFDA1);
	create_insn	(0XEFDB1);
	create_insn	(0XEFDC7);
	create_insn	(0XEFDD0);
	create_insn	(0XEFDEE);
	create_insn	(0XEFE09);
	set_name	(0XEFE1F,	"ocd_loop");
	set_name	(0XEFE26,	"ocd_delay");
	set_name	(0XEFE36,	"ocd_loop_2");
	create_insn	(x=0XEFE39);
	toggle_sign		(x,	1);
	op_hex		(x,	1);
	create_insn	(x=0XEFE44);
	toggle_sign		(x,	1);
	op_hex		(x,	1);
	create_insn	(x=0XEFE48);
	toggle_sign		(x,	1);
	op_hex		(x,	1);
	set_cmt	(0XEFE54,	"read ram",	0);
	create_insn	(x=0XEFE54);
	toggle_sign		(x,	1);
	op_hex		(x,	1);
	set_cmt	(0XEFE58,	"write ram",	0);
	create_insn	(x=0XEFE58);
	toggle_sign		(x,	1);
	op_hex		(x,	1);
	set_cmt	(0XEFE5C,	"exec",	0);
	create_insn	(x=0XEFE5C);
	toggle_sign		(x,	1);
	op_hex		(x,	1);
	set_cmt	(0XEFE60,	"exit ocd 1",	0);
	create_insn	(x=0XEFE60);
	toggle_sign		(x,	1);
	op_hex		(x,	1);
	set_cmt	(0XEFE64,	"exit ocd 2",	0);
	create_insn	(x=0XEFE64);
	toggle_sign		(x,	1);
	op_hex		(x,	1);
	create_insn	(0XEFE6A);
	create_insn	(0XEFE6D);
	create_insn	(0XEFE70);
	create_insn	(0XEFE73);
	create_insn	(0XEFE76);
	set_name	(0XEFE76,	"getOCDVersion");
	create_insn	(0XEFE82);
	set_name	(0XEFE82,	"unlock");
	set_cmt	(0XEFE89,	"send f0: unlock allready done",	0);
	create_insn	(0XEFE90);
	set_name	(0XEFE90,	"try_unlock");
	set_cmt	(0XEFE96,	"answer f1, ocd id needed",	0);
	create_insn	(x=0XEFE9B);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0XEFEA4,	"receive_ocd_id");
	set_cmt	(0XEFEA9,	"sub OCD ID",	0);
	update_extra_cmt		(0XEFEB2,	E_PREV + 0,	"receive checksum");
	set_cmt	(0XEFEBA,	"check ocid, error if any bit is set",	0);
	set_cmt	(0XEFEC1,	"if oid check enabled?",	0);
	set_name	(0XEFEC4,	"wrong_checksum");
	create_insn	(0XEFECF);
	set_name	(0XEFECF,	"enable_ocd_mode");
	create_insn	(0XEFED7);
	set_name	(0XEFED7,	"unlock_ok_second_check");
	set_name	(0XEFEE7,	"unlock_error");
	set_name	(0XEFEEC,	"unlock_error_loop");
	create_insn	(0XEFEF0);
	set_name	(0XEFEF0,	"read_ram");
	set_cmt	(0XEFEF3,	"Adress Low",	0);
	set_cmt	(0XEFEF7,	"Adress High",	0);
	set_cmt	(0XEFEFB,	"Length",	0);
	set_name	(0XEFEFC,	"read_ram_loop");
	create_insn	(0XEFF07);
	set_name	(0XEFF07,	"write_ram");
	set_cmt	(0XEFF0A,	"Offset Low",	0);
	set_cmt	(0XEFF0E,	"Offset High",	0);
	set_cmt	(0XEFF12,	"Length",	0);
	set_name	(0XEFF13,	"write_ram_loop");
	set_cmt	(0XEFF23,	"send a (0x94) as response",	0);
	create_insn	(0XEFF23);
	set_name	(0XEFF23,	"exec_ram_F07E0");
	set_cmt	(0XEFF26,	"jmp into ramcode",	0);
	create_insn	(0XEFF2B);
	set_name	(0XEFF2B,	"exit_ocd");
	create_insn	(x=0XEFF2E);
	toggle_sign		(x,	1);
	op_hex		(x,	1);
	create_insn	(0XEFF5A);
	create_insn	(0XEFF5E);
	create_insn	(0XEFF62);
	create_insn	(0XEFF66);
	create_insn	(0XEFFA1);
	set_name	(0XEFFA1,	"tool_tx");
	create_insn	(0XEFFB2);
	set_name	(0XEFFB2,	"tool_rx_0");
	create_word	(0XEFFBC);
	create_word	(0XEFFBE);
	create_word	(0XEFFC0);
	create_word	(0XEFFC2);
	create_word	(0XEFFC4);
	create_word	(0XEFFC6);
	create_word	(0XEFFC8);
	create_word	(0XEFFCA);
	create_word	(0XEFFCC);
	create_word	(0XEFFCE);
	create_byte	(0XEFFD0);
	create_byte	(0XEFFD1);
	MakeStruct	(0XEFFD2,	"signature_data");
	create_insn	(0XEFFF0);
	create_insn	(0XEFFF4);
	create_insn	(0XEFFF8);
	set_name	(0XEFFF8,	"RomFlashFirm");
	create_insn	(0XEFFFC);
	set_cmt	(0XF0010,	"A/D converter mode register 2",	1);
	create_byte	(0XF0010);
	set_name	(0XF0010,	"ADM2");
	set_cmt	(0XF0011,	"Conversion result comparison upper limit setting register",	1);
	create_byte	(0XF0011);
	set_name	(0XF0011,	"ADUL");
	set_cmt	(0XF0012,	"Conversion result comparison lower limit setting register",	1);
	create_byte	(0XF0012);
	set_name	(0XF0012,	"ADLL");
	set_cmt	(0XF0013,	"A/D test register",	1);
	set_name	(0XF0013,	"ADTES");
	set_cmt	(0XF0030,	"Pull-up resistor option register 0",	1);
	set_name	(0XF0030,	"PU0");
	set_cmt	(0XF0031,	"Pull-up resistor option register 1",	1);
	create_byte	(0XF0031);
	set_name	(0XF0031,	"PU1");
	set_cmt	(0XF0032,	"Pull-up resistor option register 2",	1);
	set_name	(0XF0032,	"PU2");
	set_cmt	(0XF0033,	"Pull-up resistor option register 3",	1);
	create_byte	(0XF0033);
	set_name	(0XF0033,	"PU3");
	set_cmt	(0XF0034,	"Pull-up resistor option register 4",	1);
	create_byte	(0XF0034);
	set_name	(0XF0034,	"PU4");
	set_cmt	(0XF0035,	"Pull-up resistor option register 5",	1);
	create_byte	(0XF0035);
	set_name	(0XF0035,	"PU5");
	set_cmt	(0XF0036,	"Pull-up resistor option register 6",	1);
	set_name	(0XF0036,	"PU6");
	set_cmt	(0XF0037,	"Pull-up resistor option register 7",	1);
	create_byte	(0XF0037);
	set_name	(0XF0037,	"PU7");
	set_cmt	(0XF0038,	"Pull-up resistor option register 8",	1);
	set_name	(0XF0038,	"PU8");
	set_cmt	(0XF0039,	"Pull-up resistor option register 9",	1);
	set_name	(0XF0039,	"PU9");
	set_cmt	(0XF003A,	"Pull-up resistor option register 10",	1);
	set_name	(0XF003A,	"PU10");
	set_cmt	(0XF003B,	"Pull-up resistor option register 11",	1);
	set_name	(0XF003B,	"PU11");
	set_cmt	(0XF003C,	"Pull-up resistor option register 12",	1);
	create_byte	(0XF003C);
	set_name	(0XF003C,	"PU12");
	set_cmt	(0XF003D,	"Pull-up resistor option register 13",	1);
	set_name	(0XF003D,	"PU13");
	set_cmt	(0XF003E,	"Pull-up resistor option register 14",	1);
	create_byte	(0XF003E);
	set_name	(0XF003E,	"PU14");
	set_cmt	(0XF0040,	"Port input mode register 0",	1);
	set_name	(0XF0040,	"PIM0");
	set_cmt	(0XF0041,	"Port input mode register 1",	1);
	create_byte	(0XF0041);
	set_name	(0XF0041,	"PIM1");
	set_cmt	(0XF0044,	"Port input mode register 4",	1);
	set_name	(0XF0044,	"PIM4");
	set_cmt	(0XF0045,	"Port input mode register 5",	1);
	set_name	(0XF0045,	"PIM5");
	set_cmt	(0XF0048,	"Port input mode register 8",	1);
	set_name	(0XF0048,	"PIM8");
	set_cmt	(0XF004E,	"Port input mode register 14",	1);
	set_name	(0XF004E,	"PIM14");
	set_cmt	(0XF0050,	"Port output mode register 0",	1);
	set_name	(0XF0050,	"POM0");
	set_cmt	(0XF0051,	"Port output mode register 1",	1);
	create_byte	(0XF0051);
	set_name	(0XF0051,	"POM1");
	set_cmt	(0XF0054,	"Port output mode register 4",	1);
	set_name	(0XF0054,	"POM4");
	set_cmt	(0XF0055,	"Port output mode register 5",	1);
	set_name	(0XF0055,	"POM5");
	set_cmt	(0XF0057,	"Port output mode register 7",	1);
	set_name	(0XF0057,	"POM7");
	set_cmt	(0XF0058,	"Port output mode register 8",	1);
	set_name	(0XF0058,	"POM8");
	set_cmt	(0XF0059,	"Port output mode register 9",	1);
	set_name	(0XF0059,	"POM9");
	set_cmt	(0XF005E,	"Port output mode register 14",	1);
	set_name	(0XF005E,	"POM14");
	set_cmt	(0XF0060,	"Port mode control register 0",	1);
	set_name	(0XF0060,	"PMC0");
	create_byte	(0XF0061);
	set_name	(0XF0061,	"PMC1");
	set_cmt	(0XF0063,	"Port mode control register 3",	1);
	set_name	(0XF0063,	"PMC3");
	create_byte	(0XF0064);
	set_name	(0XF0064,	"PMC4");
	set_cmt	(0XF006A,	"Port mode control register 10",	1);
	set_name	(0XF006A,	"PMC10");
	set_cmt	(0XF006B,	"Port mode control register 11",	1);
	set_name	(0XF006B,	"PMC11");
	set_cmt	(0XF006C,	"Port mode control register 12",	1);
	create_byte	(0XF006C);
	set_name	(0XF006C,	"PMC12");
	set_cmt	(0XF006E,	"Port mode control register 14",	1);
	create_byte	(0XF006E);
	set_name	(0XF006E,	"PMC14");
	set_cmt	(0XF0070,	"Noise filter enable register 0",	1);
	create_byte	(0XF0070);
	set_name	(0XF0070,	"NFEN0");
	set_cmt	(0XF0071,	"Noise filter enable register 1",	1);
	create_byte	(0XF0071);
	set_name	(0XF0071,	"NFEN1");
	set_cmt	(0XF0072,	"Noise filter enable register 2",	1);
	set_name	(0XF0072,	"NFEN2");
	set_cmt	(0XF0073,	"Input switch control register",	1);
	set_name	(0XF0073,	"ISC");
	set_cmt	(0XF0074,	"Timer input select register 0",	1);
	create_byte	(0XF0074);
	set_name	(0XF0074,	"TIS0");
	set_cmt	(0XF0076,	"A/D port configuration register",	1);
	set_name	(0XF0076,	"ADPC");
	set_cmt	(0XF0077,	"Peripheral I/O redirection register",	1);
	create_byte	(0XF0077);
	set_name	(0XF0077,	"PIOR");
	set_cmt	(0XF0078,	"Invalid memory access detection control register",	1);
	create_byte	(0XF0078);
	set_name	(0XF0078,	"IAWCTL");
	set_cmt	(0XF007D,	"Global digital input disable register",	1);
	set_name	(0XF007D,	"GDIDIS");
	create_byte	(0XF0080);
	set_cmt	(0XF0090,	"Data flash control register",	1);
	create_byte	(0XF0090);
	set_name	(0XF0090,	"DFLCTL");
	set_cmt	(0XF00A0,	"High-speed on-chip oscillator trimming register",	1);
	set_name	(0XF00A0,	"HIOTRM");
	create_byte	(0XF00A1);
	create_byte	(0XF00A7);
	set_cmt	(0XF00A8,	"High-speed on-chip oscillator frequency select register",	1);
	create_byte	(0XF00A8);
	set_name	(0XF00A8,	"HOCODIV");
	create_word	(0XF00B0);
	create_word	(0XF00B2);
	create_word	(0XF00B4);
	create_byte	(0XF00B6);
	create_byte	(0XF00B7);
	create_word	(0XF00B8);
	create_byte	(0XF00BA);
	create_byte	(0XF00C0);
	set_cmt	(0XF00E0,	"Multiplication/division data register C (L)",	1);
	create_word	(0XF00E0);
	set_name	(0XF00E0,	"MDCL");
	set_cmt	(0XF00E2,	"Multiplication/division data register C (H)",	1);
	create_word	(0XF00E2);
	set_name	(0XF00E2,	"MDCH");
	set_cmt	(0XF00E8,	"Multiplication/division control register",	1);
	create_byte	(0XF00E8);
	set_name	(0XF00E8,	"MDUC");
	set_cmt	(0XF00F0,	"Peripheral enable register 0",	1);
	create_byte	(0XF00F0);
	set_name	(0XF00F0,	"PER0");
	set_cmt	(0XF00F3,	"Subsystem clock supply mode control register",	1);
	create_byte	(0XF00F3);
	set_name	(0XF00F3,	"OSMC");
	create_byte	(0XF00F4);
	set_cmt	(0XF00F5,	"RAM parity error control register",	1);
	create_byte	(0XF00F5);
	set_name	(0XF00F5,	"RPECTL");
	set_cmt	(0XF00FE,	"BCD adjust result register",	1);
	set_name	(0XF00FE,	"BCDADJ");
	create_byte	(0XF00FF);
	set_cmt	(0XF0100,	"Serial status register 00",	1);
	set_name	(0XF0100,	"SSR00");
	set_cmt	(0XF0102,	"Serial status register 01",	1);
	create_word	(0XF0102);
	set_name	(0XF0102,	"SSR01");
	set_cmt	(0XF0104,	"Serial status register 02",	1);
	set_name	(0XF0104,	"SSR02");
	set_cmt	(0XF0106,	"Serial status register 03",	1);
	set_name	(0XF0106,	"SSR03");
	set_cmt	(0XF0108,	"Serial flag clear trigger register 00",	1);
	set_name	(0XF0108,	"SIR00");
	set_cmt	(0XF010A,	"Serial flag clear trigger register 01",	1);
	create_word	(0XF010A);
	set_name	(0XF010A,	"SIR01");
	set_cmt	(0XF010C,	"Serial flag clear trigger register 02",	1);
	set_name	(0XF010C,	"SIR02");
	set_cmt	(0XF010E,	"Serial flag clear trigger register 03",	1);
	set_name	(0XF010E,	"SIR03");
	set_cmt	(0XF0110,	"Serial mode register 00",	1);
	create_word	(0XF0110);
	set_name	(0XF0110,	"SMR0");
	set_cmt	(0XF0112,	"Serial mode register 01",	1);
	create_word	(0XF0112);
	set_name	(0XF0112,	"SMR1");
	set_cmt	(0XF0114,	"Serial mode register 02",	1);
	set_name	(0XF0114,	"SMR2");
	set_cmt	(0XF0116,	"Serial mode register 03",	1);
	set_name	(0XF0116,	"SMR3");
	set_cmt	(0XF0118,	"Serial communication operation setting register 00",	1);
	create_word	(0XF0118);
	set_name	(0XF0118,	"SCR00");
	set_cmt	(0XF011A,	"Serial communication operation setting register 01",	1);
	create_word	(0XF011A);
	set_name	(0XF011A,	"SCR01");
	set_cmt	(0XF011C,	"Serial communication operation setting register 02",	1);
	set_name	(0XF011C,	"SCR02");
	set_cmt	(0XF011E,	"Serial communication operation setting register 03",	1);
	set_name	(0XF011E,	"SCR03");
	set_cmt	(0XF0120,	"Serial channel enable status REGISTER 0",	1);
	set_name	(0XF0120,	"SE0");
	set_cmt	(0XF0122,	"Serial channel start status REGISTER 0",	1);
	create_word	(0XF0122);
	set_name	(0XF0122,	"SS0");
	set_cmt	(0XF0124,	"Serial channel stop status REGISTER 0",	1);
	create_word	(0XF0124);
	set_name	(0XF0124,	"ST0");
	set_cmt	(0XF0126,	"Serial clock select register 0",	1);
	create_word	(0XF0126);
	set_name	(0XF0126,	"SPS0");
	set_cmt	(0XF0128,	"Serial output register 0",	1);
	create_word	(0XF0128);
	set_name	(0XF0128,	"SO0");
	set_cmt	(0XF012A,	"Serial output enable register 0",	1);
	create_word	(0XF012A);
	set_name	(0XF012A,	"SOE0");
	set_cmt	(0XF0134,	"Serial output level register 0",	1);
	create_word	(0XF0134);
	set_name	(0XF0134,	"SOL0");
	set_cmt	(0XF0138,	"Serial standby control register 0",	1);
	set_name	(0XF0138,	"SSC0");
	set_cmt	(0XF0140,	"Serial status register 10",	1);
	set_name	(0XF0140,	"SSR10");
	set_cmt	(0XF0142,	"Serial status register 11",	1);
	set_name	(0XF0142,	"SSR11");
	set_cmt	(0XF0144,	"Serial status register 12",	1);
	set_name	(0XF0144,	"SSR12");
	set_cmt	(0XF0146,	"Serial status register 13",	1);
	set_name	(0XF0146,	"SSR13");
	set_cmt	(0XF0148,	"Serial flag clear trigger register 10",	1);
	set_name	(0XF0148,	"SIR10");
	set_cmt	(0XF014A,	"Serial flag clear trigger register 11",	1);
	set_name	(0XF014A,	"SIR11");
	set_cmt	(0XF014C,	"Serial flag clear trigger register 12",	1);
	set_name	(0XF014C,	"SIR12");
	set_cmt	(0XF014E,	"Serial flag clear trigger register 13",	1);
	set_name	(0XF014E,	"SIR13");
	set_cmt	(0XF0150,	"Serial mode register 10",	1);
	set_name	(0XF0150,	"SMR10");
	set_cmt	(0XF0152,	"Serial mode register 11",	1);
	set_name	(0XF0152,	"SMR11");
	set_cmt	(0XF0154,	"Serial mode register 12",	1);
	set_name	(0XF0154,	"SMR12");
	set_cmt	(0XF0156,	"Serial mode register 13",	1);
	set_name	(0XF0156,	"SMR13");
	set_cmt	(0XF0158,	"Serial communication operation setting register 10",	1);
	set_name	(0XF0158,	"SCR10");
	set_cmt	(0XF015A,	"Serial communication operation setting register 11",	1);
	set_name	(0XF015A,	"SCR11");
	set_cmt	(0XF015C,	"Serial communication operation setting register 12",	1);
	set_name	(0XF015C,	"SCR12");
	set_cmt	(0XF015E,	"Serial communication operation setting register 13",	1);
	set_name	(0XF015E,	"SCR13");
	set_cmt	(0XF0160,	"Serial channel enable status REGISTER 1",	1);
	set_name	(0XF0160,	"SE1");
	set_cmt	(0XF0162,	"Serial channel start status REGISTER 1",	1);
	set_name	(0XF0162,	"SS1");
	set_cmt	(0XF0164,	"Serial channel stop status REGISTER 1",	1);
	set_name	(0XF0164,	"ST1");
	set_cmt	(0XF0166,	"Serial clock select register 1",	1);
	set_name	(0XF0166,	"SPS1");
	set_cmt	(0XF0168,	"Serial output register 1",	1);
	set_name	(0XF0168,	"SO2");
	set_cmt	(0XF016A,	"Serial output enable register 1",	1);
	set_name	(0XF016A,	"SOE1");
	set_cmt	(0XF0174,	"Serial output level register 1",	1);
	set_name	(0XF0174,	"SOL1");
	set_cmt	(0XF0178,	"Serial standby control register 1",	1);
	set_name	(0XF0178,	"SSC1");
	set_cmt	(0XF0180,	"Timer counter register 00",	1);
	set_name	(0XF0180,	"TCR00");
	set_cmt	(0XF0182,	"Timer counter register 01",	1);
	set_name	(0XF0182,	"TCR01");
	set_cmt	(0XF0184,	"Timer counter register 02",	1);
	set_name	(0XF0184,	"TCR02");
	set_cmt	(0XF0186,	"Timer counter register 03",	1);
	set_name	(0XF0186,	"TCR03");
	set_cmt	(0XF0188,	"Timer counter register 04",	1);
	set_name	(0XF0188,	"TCR04");
	set_cmt	(0XF018A,	"Timer counter register 05",	1);
	set_name	(0XF018A,	"TCR05");
	set_cmt	(0XF018C,	"Timer counter register 06",	1);
	set_name	(0XF018C,	"TCR06");
	set_cmt	(0XF018E,	"Timer counter register 07",	1);
	set_name	(0XF018E,	"TCR07");
	set_cmt	(0XF0190,	"Timer mode register 00",	1);
	create_word	(0XF0190);
	set_name	(0XF0190,	"TMR00");
	set_cmt	(0XF0192,	"Timer mode register 01",	1);
	create_word	(0XF0192);
	set_name	(0XF0192,	"TMR01");
	set_cmt	(0XF0194,	"Timer mode register 02",	1);
	set_name	(0XF0194,	"TMR02");
	set_cmt	(0XF0196,	"Timer mode register 03",	1);
	set_name	(0XF0196,	"TMR03");
	set_cmt	(0XF0198,	"Timer mode register 04",	1);
	set_name	(0XF0198,	"TMR04");
	set_cmt	(0XF019A,	"Timer mode register 05",	1);
	set_name	(0XF019A,	"TMR05");
	set_cmt	(0XF019C,	"Timer mode register 06",	1);
	set_name	(0XF019C,	"TMR06");
	set_cmt	(0XF019E,	"Timer mode register 07",	1);
	create_word	(0XF019E);
	set_name	(0XF019E,	"TMR07");
	set_cmt	(0XF01A0,	"Timer status register 00",	1);
	set_name	(0XF01A0,	"TSR00");
	set_cmt	(0XF01A2,	"Timer status register 01",	1);
	create_word	(0XF01A2);
	set_name	(0XF01A2,	"TSR01");
	set_cmt	(0XF01A4,	"Timer status register 02",	1);
	set_name	(0XF01A4,	"TSR02");
	set_cmt	(0XF01A6,	"Timer status register 03",	1);
	set_name	(0XF01A6,	"TSR03");
	set_cmt	(0XF01A8,	"Timer status register 04",	1);
	set_name	(0XF01A8,	"TSR04");
	set_cmt	(0XF01AA,	"Timer status register 05",	1);
	set_name	(0XF01AA,	"TSR05");
	set_cmt	(0XF01AC,	"Timer status register 06",	1);
	set_name	(0XF01AC,	"TSR06");
	set_cmt	(0XF01AE,	"Timer status register 07",	1);
	set_name	(0XF01AE,	"TSR07");
	set_cmt	(0XF01B0,	"Timer channel enable status register 0",	1);
	set_name	(0XF01B0,	"TE0");
	set_cmt	(0XF01B2,	"Timer channel start status register 0",	1);
	create_word	(0XF01B2);
	set_name	(0XF01B2,	"TS0");
	set_cmt	(0XF01B4,	"Timer channel stop status register 0",	1);
	create_word	(0XF01B4);
	set_name	(0XF01B4,	"TT0");
	set_cmt	(0XF01B6,	"Timer clock select register 0",	1);
	create_word	(0XF01B6);
	set_name	(0XF01B6,	"TPS0");
	set_cmt	(0XF01B8,	"Timer output register 0",	1);
	create_word	(0XF01B8);
	set_name	(0XF01B8,	"TO0");
	set_cmt	(0XF01BA,	"Timer output enable register 0",	1);
	create_word	(0XF01BA);
	set_name	(0XF01BA,	"TOE0");
	set_cmt	(0XF01BC,	"Timer output level register 0",	1);
	create_word	(0XF01BC);
	set_name	(0XF01BC,	"TOL0");
	set_cmt	(0XF01BE,	"Timer output mode register 0",	1);
	create_word	(0XF01BE);
	set_name	(0XF01BE,	"TOM0");
	set_cmt	(0XF01C0,	"Timer counter register 10",	1);
	set_name	(0XF01C0,	"TCR10");
	set_cmt	(0XF01C2,	"Timer counter register 11",	1);
	set_name	(0XF01C2,	"TCR11");
	set_cmt	(0XF01C4,	"Timer counter register 12",	1);
	set_name	(0XF01C4,	"TCR12");
	set_cmt	(0XF01C6,	"Timer counter register 13",	1);
	set_name	(0XF01C6,	"TCR13");
	set_cmt	(0XF01C8,	"Timer counter register 14",	1);
	set_name	(0XF01C8,	"TCR14");
	set_cmt	(0XF01CA,	"Timer counter register 15",	1);
	set_name	(0XF01CA,	"TCR15");
	set_cmt	(0XF01CC,	"Timer counter register 16",	1);
	set_name	(0XF01CC,	"TCR16");
	set_cmt	(0XF01CE,	"Timer counter register 17",	1);
	set_name	(0XF01CE,	"TCR17");
	set_cmt	(0XF01D0,	"Timer mode register 10",	1);
	set_name	(0XF01D0,	"TMR10");
	set_cmt	(0XF01D2,	"Timer mode register 11",	1);
	set_name	(0XF01D2,	"TMR11");
	set_cmt	(0XF01D4,	"Timer mode register 12",	1);
	set_name	(0XF01D4,	"TMR12");
	set_cmt	(0XF01D6,	"Timer mode register 13",	1);
	set_name	(0XF01D6,	"TMR13");
	set_cmt	(0XF01D8,	"Timer mode register 14",	1);
	set_name	(0XF01D8,	"TMR14");
	set_cmt	(0XF01DA,	"Timer mode register 15",	1);
	set_name	(0XF01DA,	"TMR15");
	set_cmt	(0XF01DC,	"Timer mode register 16",	1);
	set_name	(0XF01DC,	"TMR16");
	set_cmt	(0XF01DE,	"Timer mode register 17",	1);
	set_name	(0XF01DE,	"TMR17");
	set_cmt	(0XF01E0,	"Timer status register 10",	1);
	set_name	(0XF01E0,	"TSR10");
	set_cmt	(0XF01E2,	"Timer status register 11",	1);
	set_name	(0XF01E2,	"TSR11");
	set_cmt	(0XF01E4,	"Timer status register 12",	1);
	set_name	(0XF01E4,	"TSR12");
	set_cmt	(0XF01E6,	"Timer status register 13",	1);
	set_name	(0XF01E6,	"TSR13");
	set_cmt	(0XF01E8,	"Timer status register 14",	1);
	set_name	(0XF01E8,	"TSR14");
	set_cmt	(0XF01EA,	"Timer status register 15",	1);
	set_name	(0XF01EA,	"TSR15");
	set_cmt	(0XF01EC,	"Timer status register 16",	1);
	set_name	(0XF01EC,	"TSR16");
	set_cmt	(0XF01EE,	"Timer status register 17",	1);
	set_name	(0XF01EE,	"TSR17");
	set_cmt	(0XF01F0,	"Timer channel enable status register 1",	1);
	set_name	(0XF01F0,	"TE1");
	set_cmt	(0XF01F2,	"Timer channel start register 1",	1);
	set_name	(0XF01F2,	"TS1");
	set_cmt	(0XF01F4,	"Timer channel stop register 1",	1);
	set_name	(0XF01F4,	"TT1");
	set_cmt	(0XF01F6,	"Timer clock select register 1",	1);
	set_name	(0XF01F6,	"TPS1");
	set_cmt	(0XF01F8,	"Timer output register 1",	1);
	set_name	(0XF01F8,	"TO1");
	set_cmt	(0XF01FA,	"Timer output enable register 1",	1);
	set_name	(0XF01FA,	"TOE1");
	set_cmt	(0XF01FC,	"Timer output level register 1",	1);
	set_name	(0XF01FC,	"TOL1");
	set_cmt	(0XF01FE,	"Timer output mode register 1",	1);
	set_name	(0XF01FE,	"TOM1");
	set_cmt	(0XF0200,	"DMA SFR address register 2",	1);
	set_name	(0XF0200,	"DSA2");
	set_cmt	(0XF0201,	"DMA SFR address register 3",	1);
	set_name	(0XF0201,	"DSA3");
	set_cmt	(0XF0202,	"DMA RAM address register 2",	1);
	set_name	(0XF0202,	"DRA2");
	set_cmt	(0XF0204,	"DMA RAM address register 3",	1);
	set_name	(0XF0204,	"DRA3");
	set_cmt	(0XF0206,	"DMA byte count register 2",	1);
	create_byte	(0XF0206);
	set_name	(0XF0206,	"DBC2");
	set_cmt	(0XF0208,	"DMA byte count register 3",	1);
	set_name	(0XF0208,	"DBC3");
	set_cmt	(0XF020A,	"DMA mode control register 2",	1);
	set_name	(0XF020A,	"DMC2");
	set_cmt	(0XF020B,	"DMA mode control register 3",	1);
	set_name	(0XF020B,	"DMC3");
	set_cmt	(0XF020C,	"DMA operation control register 2",	1);
	set_name	(0XF020C,	"DRC2");
	set_cmt	(0XF020D,	"DMA operation control register 3",	1);
	set_name	(0XF020D,	"DRC3");
	set_cmt	(0XF0230,	"IICA control register 00",	1);
	set_name	(0XF0230,	"IICCTL00");
	set_cmt	(0XF0231,	"IICA control register 01",	1);
	set_name	(0XF0231,	"IICCTL01");
	set_cmt	(0XF0232,	"IICA low-level width setting register 0",	1);
	set_name	(0XF0232,	"IICWL0");
	set_cmt	(0XF0233,	"IICA high-level width setting register 0",	1);
	set_name	(0XF0233,	"IICWH0");
	set_cmt	(0XF0234,	"Slave address register 0",	1);
	set_name	(0XF0234,	"SVA0");
	set_cmt	(0XF0238,	"IICA control register 10",	1);
	set_name	(0XF0238,	"IICCTL10");
	set_cmt	(0XF0239,	"IICA control register 11",	1);
	set_name	(0XF0239,	"IICCTL11");
	set_cmt	(0XF023A,	"IICA low-level width setting register 1",	1);
	set_name	(0XF023A,	"IICWL1");
	set_cmt	(0XF023B,	"IICA high-level width setting register 1",	1);
	set_name	(0XF023B,	"IICWH1");
	set_cmt	(0XF023C,	"Slave address register 1",	1);
	set_name	(0XF023C,	"SVA1");
	set_cmt	(0XF02F0,	"Flash memory CRC control register",	1);
	set_name	(0XF02F0,	"CRC0CTL");
	set_cmt	(0XF02F2,	"Flash memory CRC operation result register",	1);
	set_name	(0XF02F2,	"PGCRCL");
	set_cmt	(0XF02FA,	"CRC data register",	1);
	create_word	(0XF02FA);
	set_name	(0XF02FA,	"CRCD");
	create_byte	(0XF0300);
	set_name	(0XF0300,	"PFSEG0");
	create_byte	(0XF0301);
	set_name	(0XF0301,	"PFSEG1");
	create_byte	(0XF0302);
	set_name	(0XF0302,	"PFSEG2");
	create_byte	(0XF0303);
	set_name	(0XF0303,	"PFSEG3");
	create_byte	(0XF0304);
	set_name	(0XF0304,	"PFSEG4");
	create_byte	(0XF0308);
	set_name	(0XF0308,	"ISCLCD");
	create_byte	(0XF0400);
	set_name	(0XF0400,	"SEG0");
	set_name	(0XF0401,	"SEG1");
	create_byte	(0XF0402);
	set_name	(0XF0402,	"SEG2");
	set_name	(0XF0403,	"SEG3");
	create_byte	(0XF0404);
	set_name	(0XF0404,	"SEG4");
	create_byte	(0XF0405);
	set_name	(0XF0405,	"SEG5");
	set_name	(0XF0406,	"SEG6");
	create_byte	(0XF0407);
	set_name	(0XF0407,	"SEG7");
	set_name	(0XF0408,	"SEG8");
	create_byte	(0XF0409);
	set_name	(0XF0409,	"SEG9");
	set_name	(0XF040A,	"SEG10");
	set_name	(0XF040B,	"SEG11");
	create_byte	(0XF040C);
	set_name	(0XF040C,	"SEG12");
	set_name	(0XF040D,	"SEG13");
	create_byte	(0XF040E);
	set_name	(0XF040E,	"SEG14");
	create_byte	(0XF041F);
	create_byte	(0XF0421);
	set_name	(0XF0421,	"SEG33");
	create_byte	(0XF0422);
	set_name	(0XF0422,	"SEG34");
	set_name	(0XF0423,	"SEG35");
	create_byte	(0XF0424);
	set_name	(0XF0424,	"SEG36");
	set_name	(0XF0425,	"SEG37");
	create_byte	(0XF0426);
	set_name	(0XF0426,	"SEG38");
	create_byte	(0XF0752);
	create_insn	(0XF07E0);
	create_byte	(0XF07F5);
	set_name	(0XF07F5,	"ocd_flag");
	create_word	(0XF07F6);
	create_insn	(0XF07F9);
	create_word	(0XF0806);
	create_byte	(0XF0880);
	create_byte	(0XF0881);
	set_name	(0XF0881,	"flashcmd");
	create_insn	(0XF095E);
	create_insn	(0XF09B8);
	create_word	(0XF0A88);
	create_word	(0XF0B00);
	create_word	(0XF0B02);
	create_word	(0XF0B04);
	create_byte	(0XF0B07);
	set_cmt	(0XF1000,	"Flashstart\nCRC-16/KERMIT",	0);
	update_extra_cmt		(0XF1000,	E_PREV + 0,	"00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 10 11 12 13 14 15 16 17 18 19");
	update_extra_cmt		(0XF1000,	E_PREV + 1,	"CS CS AA AA AA BB BB BB CC ?? DD DD EE EE FF FF GG HH II II JJ JJ ?? ??");
	update_extra_cmt		(0XF1000,	E_PREV + 2,	"00 00 E0 07 26 41 00 34 00 00 00 11 89 FC A1 FF 0E A5 15 44 00 00 DF F3");
	update_extra_cmt		(0XF1000,	E_PREV + 3,	"");
	update_extra_cmt		(0XF1000,	E_PREV + 4,	"AA = word_FFB7C word_FFB7A = Savecounter   stored as little endian");
	update_extra_cmt		(0XF1000,	E_PREV + 5,	"BB = word_FFB6E  word_FFB6C");
	update_extra_cmt		(0XF1000,	E_PREV + 6,	"CC = byte_FFB22");
	update_extra_cmt		(0XF1000,	E_PREV + 7,	"DD = word_FFB72");
	update_extra_cmt		(0XF1000,	E_PREV + 8,	"EE = word_FFB74");
	update_extra_cmt		(0XF1000,	E_PREV + 9,	"FF = word_FFB06 + word_FFB04");
	update_extra_cmt		(0XF1000,	E_PREV + 10,	"GG = byte_FFB85 + byte_FFB84");
	update_extra_cmt		(0XF1000,	E_PREV + 11,	"HH = byte_FFB87");
	update_extra_cmt		(0XF1000,	E_PREV + 12,	"II = word_FFB0A");
	update_extra_cmt		(0XF1000,	E_PREV + 13,	"JJ = word_FFB0C");
	update_extra_cmt		(0XF1000,	E_PREV + 14,	"");
	update_extra_cmt		(0XF1000,	E_PREV + 15,	"CRC-16/KERMIT: 0x8AFF");
	set_cmt	(0XF1018,	"CRC-16/KERMIT",	0);
	create_byte	(0XF1400);
	make_array	(0XF1400,	0X18);
	create_byte	(0XF1418);
	make_array	(0XF1418,	0X18);
	create_byte	(0XF1430);
	make_array	(0XF1430,	0X18);
	create_byte	(0XF1448);
	make_array	(0XF1448,	0X18);
	create_byte	(0XF1460);
	make_array	(0XF1460,	0X18);
	create_byte	(0XF1478);
	make_array	(0XF1478,	0X18);
	create_byte	(0XF1490);
	make_array	(0XF1490,	0X18);
	create_byte	(0XF14A8);
	make_array	(0XF14A8,	0X18);
	create_byte	(0XF14C0);
	make_array	(0XF14C0,	0X18);
	create_insn	(0XF2B7E);
	create_insn	(0XF2BB9);
	create_insn	(0XF2BE0);
	create_insn	(0XF2C33);
	create_insn	(0XF2D28);
	create_insn	(0XF2D49);
	create_insn	(0XF2D92);
	create_insn	(0XF2D9A);
	create_insn	(0XF2F44);
	create_insn	(0XF2FB6);
	create_insn	(0XF2FBB);
	create_insn	(0XF2FC3);
	create_insn	(0XF30BD);
	create_insn	(0XF30FA);
	create_insn	(0XF3137);
	create_insn	(0XF31A2);
	create_insn	(0XF31AE);
	create_insn	(0XF31C5);
	create_insn	(0XF31D9);
	create_insn	(0XF31EE);
	create_insn	(0XF3202);
	create_insn	(0XF82CF);
	create_insn	(0XF82DF);
	create_insn	(0XF82E4);
	create_insn	(0XF82E9);
	create_insn	(0XF8304);
	create_insn	(0XF8319);
	create_insn	(0XF8337);
	create_insn	(0XF837C);
	create_insn	(0XF83A4);
	create_insn	(0XF83C0);
	create_insn	(0XF83F5);
	create_insn	(0XF8418);
	create_insn	(0XF8422);
	create_insn	(0XF84BD);
	create_insn	(0XF84C2);
	create_insn	(0XF84DE);
	create_insn	(0XF8521);
	create_insn	(0XF8532);
	create_insn	(0XF8545);
	create_insn	(0XF854A);
	create_insn	(0XF8558);
	create_insn	(0XF8590);
	create_insn	(0XF859B);
	create_insn	(0XF859C);
	create_insn	(0XF85B6);
	create_byte	(0XFA2A1);
	create_word	(0XFBDF8);
	create_byte	(0XFE606);
	create_byte	(0XFF573);
	create_byte	(0XFF635);
	create_byte	(0XFF8A9);
	create_byte	(0XFF91A);
	create_word	(0XFFA80);
	create_word	(0XFFA82);
	create_word	(0XFFA84);
	create_word	(0XFFA98);
	create_word	(0XFFABA);
	set_name	(0XFFABA,	"uart_tx_buffer_ptr");
	create_word	(0XFFABC);
	set_name	(0XFFABC,	"uart_tx_buffer_len");
	create_word	(0XFFABE);
	set_name	(0XFFABE,	"uart_rx_buffer_ptr");
	create_word	(0XFFAC0);
	set_name	(0XFFAC0,	"uart_rx_buffer_len");
	create_word	(0XFFAC2);
	set_name	(0XFFAC2,	"uart_rx_buffer_size");
	MakeStruct	(0XFFAC4,	"pfdl_descriptor_t");
	MakeStruct	(0XFFAC6,	"pfdl_request_t");
	create_byte	(0XFFACE);
	set_name	(0XFFACE,	"g_pfdl_status");
	create_byte	(0XFFAD0);
	create_byte	(0XFFAD2);
	create_byte	(0XFFAD4);
	create_byte	(0XFFAD5);
	set_cmt	(0XFFAD8,	"0x44-0x86",	0);
	create_word	(0XFFAD8);
	create_word	(0XFFADA);
	set_cmt	(0XFFADC,	"Data: 0x48",	0);
	set_name	(0XFFADC,	"Dispatcher_0");
	create_word	(0XFFB04);
	create_word	(0XFFB06);
	create_word	(0XFFB0A);
	set_name	(0XFFB0A,	"gear_ratio");
	create_word	(0XFFB0C);
	create_word	(0XFFB0E);
	create_word	(0XFFB10);
	create_word	(0XFFB12);
	create_word	(0XFFB14);
	create_byte	(0XFFB16);
	create_byte	(0XFFB18);
	create_byte	(0XFFB1A);
	create_byte	(0XFFB1B);
	create_byte	(0XFFB1C);
	create_byte	(0XFFB1D);
	create_byte	(0XFFB1E);
	set_name	(0XFFB1E,	"rtc_hour");
	create_byte	(0XFFB1F);
	set_name	(0XFFB1F,	"rtc_minutes");
	create_byte	(0XFFB20);
	set_name	(0XFFB20,	"rtc_seconds");
	set_cmt	(0XFFB22,	"1: Trip\n7: Error",	1);
	create_byte	(0XFFB22);
	set_name	(0XFFB22,	"currentDisplayMode");
	create_byte	(0XFFB23);
	set_name	(0XFFB23,	"lastDisplayMode");
	create_byte	(0XFFB24);
	create_word	(0XFFB26);
	create_byte	(0XFFB28);
	create_word	(0XFFB2A);
	create_word	(0XFFB2C);
	create_byte	(0XFFB2E);
	create_word	(0XFFB30);
	create_word	(0XFFB32);
	create_word	(0XFFB34);
	create_word	(0XFFB36);
	create_word	(0XFFB38);
	create_word	(0XFFB3A);
	create_word	(0XFFB3C);
	set_name	(0XFFB3C,	"currentSpeed?");
	create_byte	(0XFFB3E);
	create_byte	(0XFFB3F);
	create_byte	(0XFFB40);
	create_byte	(0XFFB41);
	create_word	(0XFFB42);
	create_word	(0XFFB44);
	create_word	(0XFFB46);
	create_word	(0XFFB48);
	create_word	(0XFFB4A);
	create_word	(0XFFB4C);
	create_byte	(0XFFB4E);
	create_byte	(0XFFB4F);
	create_byte	(0XFFB52);
	create_byte	(0XFFB53);
	create_byte	(0XFFB54);
	create_byte	(0XFFB56);
	set_name	(0XFFB56,	"rightButtonPressed?");
	create_byte	(0XFFB57);
	create_byte	(0XFFB58);
	create_byte	(0XFFB5A);
	set_name	(0XFFB5A,	"leftButtonPressed?");
	create_byte	(0XFFB5B);
	create_byte	(0XFFB5C);
	create_byte	(0XFFB5E);
	create_byte	(0XFFB60);
	set_name	(0XFFB60,	"p0_counter");
	create_word	(0XFFB62);
	create_byte	(0XFFB64);
	create_byte	(0XFFB65);
	create_byte	(0XFFB66);
	create_byte	(0XFFB67);
	create_byte	(0XFFB68);
	create_byte	(0XFFB69);
	set_name	(0XFFB69,	"TimerChannel07Fired");
	create_byte	(0XFFB6B);
	create_word	(0XFFB6C);
	set_name	(0XFFB6C,	"totalDistance?");
	create_word	(0XFFB6E);
	create_word	(0XFFB70);
	create_word	(0XFFB72);
	set_name	(0XFFB72,	"Trip_Distance16Bit");
	create_word	(0XFFB74);
	set_name	(0XFFB74,	"Total_Distance16Bit");
	create_word	(0XFFB76);
	create_word	(0XFFB78);
	create_word	(0XFFB7A);
	set_name	(0XFFB7A,	"SaveCounterLow");
	create_word	(0XFFB7C);
	set_name	(0XFFB7C,	"SaveCounterHigh");
	create_byte	(0XFFB7E);
	create_word	(0XFFB80);
	create_byte	(0XFFB82);
	set_name	(0XFFB82,	"BlockNumber");
	create_byte	(0XFFB83);
	set_name	(0XFFB83,	"CallCount");
	create_byte	(0XFFB84);
	set_name	(0XFFB84,	"flag_km_or_miles");
	create_byte	(0XFFB85);
	create_byte	(0XFFB86);
	create_byte	(0XFFB87);
	set_name	(0XFFB87,	"Trip_TopSpeed?");
	create_byte	(0XFFB88);
	create_word	(0XFFB96);
	create_word	(0XFFBA8);
	create_word	(0XFFBAA);
	create_word	(0XFFBAC);
	create_word	(0XFFBB4);
	create_byte	(0XFFBB6);
	create_byte	(0XFFBBA);
	create_word	(0XFFBBE);
	create_word	(0XFFBC2);
	create_word	(0XFFBC4);
	create_byte	(0XFFBC6);
	set_name	(0XFFBC6,	"TimerFired");
	create_byte	(0XFFBC7);
	create_word	(0XFFBC8);
	create_word	(0XFFBCA);
	create_byte	(0XFFBCC);
	set_name	(0XFFBCC,	"uart_recv_state");
	create_word	(0XFFBCE);
	create_word	(0XFFBD0);
	create_word	(0XFFBD2);
	create_byte	(0XFFBD4);
	create_byte	(0XFFBD5);
	set_name	(0XFFBD5,	"frame_len");
	create_byte	(0XFFBD6);
	set_cmt	(0XFFBD7,	"53",	0);
	create_byte	(0XFFBD7);
	set_name	(0XFFBD7,	"rxbuffer1");
	set_cmt	(0XFFBD8,	"87",	0);
	create_byte	(0XFFBD8);
	set_name	(0XFFBD8,	"rxbuffer2");
	create_byte	(0XFFBD9);
	set_name	(0XFFBD9,	"rxbuffer3");
	set_cmt	(0XFFBDA,	"cmd",	0);
	create_byte	(0XFFBDA);
	set_name	(0XFFBDA,	"rxbuffer4");
	set_cmt	(0XFFBDB,	"framelen",	0);
	create_byte	(0XFFBDB);
	set_name	(0XFFBDB,	"rxbuffer5");
	create_byte	(0XFFBDC);
	set_name	(0XFFBDC,	"rxbuffer6");
	create_byte	(0XFFBDD);
	set_name	(0XFFBDD,	"rxbuffer7");
	create_byte	(0XFFBDE);
	set_name	(0XFFBDE,	"rxbuffer8");
	create_byte	(0XFFBDF);
	set_name	(0XFFBDF,	"rxbuffer9");
	create_byte	(0XFFBE0);
	set_name	(0XFFBE0,	"rxbuffer10");
	create_byte	(0XFFBE1);
	set_name	(0XFFBE1,	"rxbuffer11");
	create_byte	(0XFFBE2);
	set_name	(0XFFBE2,	"rxbuffer12");
	create_byte	(0XFFBE3);
	set_name	(0XFFBE3,	"rxbuffer13");
	create_byte	(0XFFBE4);
	set_name	(0XFFBE4,	"rxbuffer14");
	create_byte	(0XFFBE5);
	set_name	(0XFFBE5,	"rxbuffer15");
	create_byte	(0XFFBE6);
	create_byte	(0XFFBF5);
	create_byte	(0XFFBF6);
	create_byte	(0XFFBF7);
	create_byte	(0XFFBF8);
	create_byte	(0XFFBF9);
	create_byte	(0XFFBFA);
	create_byte	(0XFFBFB);
	create_byte	(0XFFBFC);
	create_byte	(0XFFC0A);
	create_word	(0XFFC0C);
	create_byte	(0XFFC0E);
	create_word	(0XFFC10);
	create_byte	(0XFFC12);
	set_name	(0XFFC12,	"BatteryPercentage");
	create_byte	(0XFFC13);
	create_byte	(0XFFC14);
	create_byte	(0XFFC15);
	create_byte	(0XFFC16);
	create_byte	(0XFFC17);
	create_byte	(0XFFC18);
	create_byte	(0XFFC19);
	create_byte	(0XFFC1A);
	create_word	(0XFFC1C);
	create_byte	(0XFFC1E);
	create_byte	(0XFFC1F);
	create_byte	(0XFFC20);
	create_byte	(0XFFC21);
	create_byte	(0XFFC22);
	create_word	(0XFFC32);
	create_word	(0XFFC34);
	create_word	(0XFFC36);
	create_word	(0XFFC38);
	create_word	(0XFFC3A);
	create_word	(0XFFC3C);
	create_word	(0XFFC3E);
	create_byte	(0XFFC40);
	create_byte	(0XFFC41);
	create_byte	(0XFFC42);
	create_byte	(0XFFC43);
	create_word	(0XFFC44);
	create_byte	(0XFFC46);
	create_word	(0XFFC48);
	create_word	(0XFFC4A);
	create_word	(0XFFC4C);
	create_word	(0XFFC4E);
	create_word	(0XFFC50);
	create_word	(0XFFC52);
	create_word	(0XFFC54);
	create_word	(0XFFC56);
	create_word	(0XFFC58);
	create_word	(0XFFC5A);
	create_word	(0XFFC5C);
	create_word	(0XFFC5E);
	create_word	(0XFFC60);
	create_word	(0XFFC62);
	create_word	(0XFFC64);
	create_word	(0XFFC66);
	create_word	(0XFFC68);
	create_word	(0XFFC6A);
	create_word	(0XFFC6C);
	create_word	(0XFFC6E);
	create_word	(0XFFC70);
	create_word	(0XFFC72);
	create_word	(0XFFC74);
	create_word	(0XFFC76);
	create_word	(0XFFE20);
	create_byte	(0XFFE22);
	create_byte	(0XFFE23);
	create_word	(0XFFE24);
	create_word	(0XFFE26);
	create_word	(0XFFE28);
	create_byte	(0XFFE2A);
	create_byte	(0XFFE2B);
	create_word	(0XFFE2C);
	create_word	(0XFFE2E);
	create_word	(0XFFE30);
	create_word	(0XFFE32);
	create_word	(0XFFE34);
	create_byte	(0XFFE36);
	create_byte	(0XFFE37);
	create_word	(0XFFE38);
	create_word	(0XFFE3A);
	create_word	(0XFFE3C);
	create_word	(0XFFE3E);
	create_word	(0XFFE40);
	create_word	(0XFFE42);
	create_word	(0XFFE44);
	create_word	(0XFFE46);
	create_word	(0XFFE48);
	create_word	(0XFFE4A);
	create_word	(0XFFE4C);
	create_word	(0XFFE4E);
	create_word	(0XFFE50);
	create_word	(0XFFE52);
	create_word	(0XFFE54);
	create_word	(0XFFE56);
	create_word	(0XFFE58);
	create_word	(0XFFE5A);
	create_byte	(0XFFE5C);
	create_byte	(0XFFE5D);
	create_word	(0XFFE5E);
	create_byte	(0XFFE60);
	create_byte	(0XFFE61);
	create_word	(0XFFE62);
	create_byte	(0XFFE64);
	create_byte	(0XFFE65);
	create_word	(0XFFE66);
	create_byte	(0XFFE68);
	create_byte	(0XFFE69);
	create_word	(0XFFE6A);
	create_byte	(0XFFE6C);
	create_byte	(0XFFE6D);
	create_byte	(0XFFE6E);
	create_byte	(0XFFE6F);
	create_byte	(0XFFE70);
	create_byte	(0XFFE71);
	create_byte	(0XFFE72);
	create_byte	(0XFFE73);
	create_byte	(0XFFE74);
	create_byte	(0XFFE75);
	create_byte	(0XFFE76);
	create_byte	(0XFFE77);
	create_byte	(0XFFE78);
	create_byte	(0XFFE79);
	create_byte	(0XFFE7A);
	create_byte	(0XFFE7B);
	create_byte	(0XFFE7C);
	create_byte	(0XFFE7D);
	create_byte	(0XFFE7E);
	create_byte	(0XFFE7F);
	create_byte	(0XFFE80);
	create_byte	(0XFFE81);
	create_byte	(0XFFE82);
	create_byte	(0XFFE83);
	create_byte	(0XFFE84);
	create_byte	(0XFFE85);
	create_byte	(0XFFE86);
	set_name	(0XFFE86,	"OCDMode");
	create_byte	(0XFFE87);
	create_byte	(0XFFE88);
	create_byte	(0XFFE89);
	create_byte	(0XFFE8A);
	create_byte	(0XFFE91);
	create_byte	(0XFFE96);
	create_byte	(0XFFEC3);
	create_word	(0XFFED8);
	create_word	(0XFFEDA);
	create_word	(0XFFEDC);
	create_word	(0XFFEDE);
	create_byte	(0XFFEE4);
	create_byte	(0XFFEEE);
	create_word	(0XFFEF6);
	set_cmt	(0XFFF00,	"Port register 0",	1);
	create_byte	(0XFFF00);
	set_name	(0XFFF00,	"P0");
	set_cmt	(0XFFF01,	"Port register 1",	1);
	create_byte	(0XFFF01);
	set_name	(0XFFF01,	"P1");
	set_cmt	(0XFFF02,	"Port register 2",	1);
	set_name	(0XFFF02,	"P2");
	set_cmt	(0XFFF03,	"Port register 3",	1);
	create_byte	(0XFFF03);
	set_name	(0XFFF03,	"P3");
	set_cmt	(0XFFF04,	"Port register 4",	1);
	create_byte	(0XFFF04);
	set_name	(0XFFF04,	"P4");
	set_cmt	(0XFFF05,	"Port register 5",	1);
	create_byte	(0XFFF05);
	set_name	(0XFFF05,	"P5");
	set_cmt	(0XFFF06,	"Port register 6",	1);
	create_byte	(0XFFF06);
	set_name	(0XFFF06,	"P6");
	set_cmt	(0XFFF07,	"Port register 7",	1);
	create_byte	(0XFFF07);
	set_name	(0XFFF07,	"P7");
	set_cmt	(0XFFF08,	"Port register 8",	1);
	set_name	(0XFFF08,	"P8");
	set_cmt	(0XFFF09,	"Port register 9",	1);
	create_byte	(0XFFF09);
	set_name	(0XFFF09,	"P9");
	set_cmt	(0XFFF0A,	"Port register 10",	1);
	set_name	(0XFFF0A,	"P10");
	set_cmt	(0XFFF0B,	"Port register 11",	1);
	set_name	(0XFFF0B,	"P11");
	set_cmt	(0XFFF0C,	"Port register 12",	1);
	create_byte	(0XFFF0C);
	set_name	(0XFFF0C,	"P12");
	set_cmt	(0XFFF0D,	"Port register 13",	1);
	create_byte	(0XFFF0D);
	set_name	(0XFFF0D,	"P13");
	set_cmt	(0XFFF0E,	"Port register 14",	1);
	create_byte	(0XFFF0E);
	set_name	(0XFFF0E,	"P14");
	set_cmt	(0XFFF0F,	"Port register 15",	1);
	set_name	(0XFFF0F,	"P15");
	set_cmt	(0XFFF10,	"Serial data register 00",	1);
	create_word	(0XFFF10);
	set_name	(0XFFF10,	"SDR00");
	set_cmt	(0XFFF12,	"Serial data register 01",	1);
	create_word	(0XFFF12);
	set_name	(0XFFF12,	"SDR01");
	set_cmt	(0XFFF14,	"Serial data register 12",	1);
	set_name	(0XFFF14,	"SDR12");
	set_cmt	(0XFFF16,	"Serial data register 13",	1);
	set_name	(0XFFF16,	"SDR13");
	set_cmt	(0XFFF18,	"Timer data register 00",	1);
	set_name	(0XFFF18,	"TDR00");
	create_byte	(0XFFF19);
	set_cmt	(0XFFF1A,	"Timer data register 01",	1);
	create_word	(0XFFF1A);
	set_name	(0XFFF1A,	"TDR01");
	set_cmt	(0XFFF1E,	"10-bit A/D cinversation result register",	1);
	set_name	(0XFFF1E,	"ADCR");
	set_cmt	(0XFFF1F,	"8-bit A/D cinversation result register",	1);
	set_name	(0XFFF1F,	"ADCRH");
	set_cmt	(0XFFF20,	"Port mode register 0",	1);
	set_name	(0XFFF20,	"PM0");
	set_cmt	(0XFFF21,	"Port mode register 1",	1);
	create_byte	(0XFFF21);
	set_name	(0XFFF21,	"PM1");
	set_cmt	(0XFFF22,	"Port mode register 2",	1);
	create_byte	(0XFFF22);
	set_name	(0XFFF22,	"PM2");
	set_cmt	(0XFFF23,	"Port mode register 3",	1);
	create_byte	(0XFFF23);
	set_name	(0XFFF23,	"PM3");
	set_cmt	(0XFFF24,	"Port mode register 4",	1);
	create_byte	(0XFFF24);
	set_name	(0XFFF24,	"PM4");
	set_cmt	(0XFFF25,	"Port mode register 5",	1);
	create_byte	(0XFFF25);
	set_name	(0XFFF25,	"PM5");
	set_cmt	(0XFFF26,	"Port mode register 6",	1);
	create_byte	(0XFFF26);
	set_name	(0XFFF26,	"PM6");
	set_cmt	(0XFFF27,	"Port mode register 7",	1);
	create_byte	(0XFFF27);
	set_name	(0XFFF27,	"PM7");
	set_cmt	(0XFFF28,	"Port mode register 8",	1);
	set_name	(0XFFF28,	"PM8");
	set_cmt	(0XFFF29,	"Port mode register 9",	1);
	set_name	(0XFFF29,	"PM9");
	set_cmt	(0XFFF2A,	"Port mode register 10",	1);
	set_name	(0XFFF2A,	"PM10");
	set_cmt	(0XFFF2B,	"Port mode register 11",	1);
	set_name	(0XFFF2B,	"PM11");
	set_cmt	(0XFFF2C,	"Port mode register 12",	1);
	create_byte	(0XFFF2C);
	set_name	(0XFFF2C,	"PM12");
	set_cmt	(0XFFF2D,	"Port mode register 13",	1);
	set_name	(0XFFF2D,	"PM13");
	set_cmt	(0XFFF2E,	"Port mode register 14",	1);
	create_byte	(0XFFF2E);
	set_name	(0XFFF2E,	"PM14");
	set_cmt	(0XFFF2F,	"Port mode register 15",	1);
	set_name	(0XFFF2F,	"PM15");
	set_cmt	(0XFFF30,	"A/D converter mode register 0",	1);
	create_byte	(0XFFF30);
	set_name	(0XFFF30,	"ADM0");
	set_cmt	(0XFFF31,	"Analog input channel specification",	1);
	create_byte	(0XFFF31);
	set_name	(0XFFF31,	"ADS");
	set_cmt	(0XFFF32,	"A/D converter mode register 1",	1);
	create_byte	(0XFFF32);
	set_name	(0XFFF32,	"ADM1");
	set_cmt	(0XFFF37,	"Key return mode register",	1);
	set_name	(0XFFF37,	"KRM");
	set_cmt	(0XFFF38,	"External interrupt rising edge enable register 0",	1);
	create_byte	(0XFFF38);
	set_name	(0XFFF38,	"EGP0");
	set_cmt	(0XFFF39,	"External interrupt falling edge enable register 0",	1);
	create_byte	(0XFFF39);
	set_name	(0XFFF39,	"EGN0");
	set_cmt	(0XFFF3A,	"External interrupt rising edge enable register 1",	1);
	set_name	(0XFFF3A,	"EGP1");
	set_cmt	(0XFFF3B,	"External interrupt falling edge enable register 1",	1);
	set_name	(0XFFF3B,	"EGN1");
	create_byte	(0XFFF40);
	set_name	(0XFFF40,	"LCDM0");
	create_byte	(0XFFF41);
	set_name	(0XFFF41,	"LCDM1");
	create_byte	(0XFFF42);
	set_name	(0XFFF42,	"LCDC0");
	create_byte	(0XFFF43);
	set_name	(0XFFF43,	"VLCD");
	set_cmt	(0XFFF44,	"Serial data register 02",	1);
	set_name	(0XFFF44,	"SDR02");
	set_cmt	(0XFFF46,	"Serial data register 03",	1);
	set_name	(0XFFF46,	"SDR03");
	set_cmt	(0XFFF48,	"Serial data register 10",	1);
	set_name	(0XFFF48,	"SDR10");
	set_cmt	(0XFFF4A,	"Serial data register 11",	1);
	set_name	(0XFFF4A,	"SDR11");
	set_cmt	(0XFFF50,	"IICA shift register 0",	1);
	set_name	(0XFFF50,	"IICA0");
	set_cmt	(0XFFF51,	"IICA status register 0",	1);
	set_name	(0XFFF51,	"IICS0");
	set_cmt	(0XFFF52,	"IICA flag register 0",	1);
	set_name	(0XFFF52,	"IICF0");
	set_cmt	(0XFFF53,	"IICA shift register 1",	1);
	set_name	(0XFFF53,	"IICA1");
	set_cmt	(0XFFF54,	"IICA status register 1",	1);
	set_name	(0XFFF54,	"IICS1");
	set_cmt	(0XFFF55,	"IICA flag register 1",	1);
	set_name	(0XFFF55,	"IICF1");
	set_cmt	(0XFFF64,	"Timer data register 02",	1);
	set_name	(0XFFF64,	"TDR02");
	set_cmt	(0XFFF66,	"Timer data register 03",	1);
	set_name	(0XFFF66,	"TDR03");
	set_cmt	(0XFFF68,	"Timer data register 04",	1);
	set_name	(0XFFF68,	"TDR04");
	set_cmt	(0XFFF6A,	"Timer data register 05",	1);
	set_name	(0XFFF6A,	"TDR05");
	set_cmt	(0XFFF6C,	"Timer data register 06",	1);
	set_name	(0XFFF6C,	"TDR06");
	set_cmt	(0XFFF6E,	"Timer data register 07",	1);
	create_word	(0XFFF6E);
	set_name	(0XFFF6E,	"TDR07");
	set_cmt	(0XFFF70,	"Timer data register 10",	1);
	set_name	(0XFFF70,	"TDR10");
	set_cmt	(0XFFF72,	"Timer data register 11",	1);
	set_name	(0XFFF72,	"TDR11");
	set_cmt	(0XFFF74,	"Timer data register 12",	1);
	set_name	(0XFFF74,	"TDR12");
	set_cmt	(0XFFF76,	"Timer data register 13",	1);
	set_name	(0XFFF76,	"TDR13");
	set_cmt	(0XFFF78,	"Timer data register 14",	1);
	set_name	(0XFFF78,	"TDR14");
	set_cmt	(0XFFF7A,	"Timer data register 15",	1);
	set_name	(0XFFF7A,	"TDR15");
	set_cmt	(0XFFF7C,	"Timer data register 16",	1);
	set_name	(0XFFF7C,	"TDR16");
	set_cmt	(0XFFF7E,	"Timer data register 17",	1);
	set_name	(0XFFF7E,	"TDR17");
	create_byte	(0XFFF80);
	create_byte	(0XFFF81);
	create_word	(0XFFF82);
	create_byte	(0XFFF84);
	create_byte	(0XFFF85);
	create_word	(0XFFF86);
	create_byte	(0XFFF88);
	create_byte	(0XFFF89);
	create_byte	(0XFFF8A);
	create_byte	(0XFFF8B);
	create_word	(0XFFF8C);
	create_word	(0XFFF8E);
	set_cmt	(0XFFF90,	"Interval timer control register",	1);
	create_word	(0XFFF90);
	set_name	(0XFFF90,	"ITMC");
	set_cmt	(0XFFF92,	"Second count register",	1);
	create_byte	(0XFFF92);
	set_name	(0XFFF92,	"SEC");
	set_cmt	(0XFFF93,	"Minute count register",	1);
	create_byte	(0XFFF93);
	set_name	(0XFFF93,	"MIN");
	set_cmt	(0XFFF94,	"Hour count register",	1);
	create_byte	(0XFFF94);
	set_name	(0XFFF94,	"HOUR");
	set_cmt	(0XFFF95,	"Week count register",	1);
	set_name	(0XFFF95,	"WEEK");
	set_cmt	(0XFFF96,	"Day count register",	1);
	set_name	(0XFFF96,	"DAY");
	set_cmt	(0XFFF97,	"Month count register",	1);
	set_name	(0XFFF97,	"MONTH");
	set_cmt	(0XFFF98,	"Year count register",	1);
	set_name	(0XFFF98,	"YEAR");
	set_cmt	(0XFFF99,	"Watch error correction register",	1);
	set_name	(0XFFF99,	"SUBCUD");
	set_cmt	(0XFFF9A,	"Alarm minute register",	1);
	set_name	(0XFFF9A,	"ALARMWM");
	set_cmt	(0XFFF9B,	"Alarm hour register",	1);
	set_name	(0XFFF9B,	"ALARMWH");
	set_cmt	(0XFFF9C,	"Alarm week register",	1);
	set_name	(0XFFF9C,	"ALARMWW");
	set_cmt	(0XFFF9D,	"Real-time clock control register 0",	1);
	set_name	(0XFFF9D,	"RTCC0");
	set_cmt	(0XFFF9E,	"Real-time clock control register 1",	1);
	set_name	(0XFFF9E,	"RTCC1");
	set_cmt	(0XFFFA0,	"Clock operation mode control register",	1);
	create_byte	(0XFFFA0);
	set_name	(0XFFFA0,	"CMC");
	set_cmt	(0XFFFA1,	"Clock operation status control register",	1);
	create_byte	(0XFFFA1);
	set_name	(0XFFFA1,	"CSC");
	set_cmt	(0XFFFA2,	"Oscillation stabilization time counter starus register",	1);
	set_name	(0XFFFA2,	"OSTC");
	set_cmt	(0XFFFA3,	"Oscillation stabilization time select register",	1);
	set_name	(0XFFFA3,	"OSTS");
	set_cmt	(0XFFFA4,	"System clock control register",	1);
	create_byte	(0XFFFA4);
	set_name	(0XFFFA4,	"CKC");
	set_cmt	(0XFFFA5,	"Clock output select register 0",	1);
	set_name	(0XFFFA5,	"CKS0");
	set_cmt	(0XFFFA6,	"Clock output select register 1",	1);
	set_name	(0XFFFA6,	"CKS1");
	set_cmt	(0XFFFA8,	"Reset control flag register",	1);
	create_byte	(0XFFFA8);
	set_name	(0XFFFA8,	"RESF");
	set_cmt	(0XFFFA9,	"Voltage detection register",	1);
	set_name	(0XFFFA9,	"LVIM");
	set_cmt	(0XFFFAA,	"Voltage detection level register",	1);
	set_name	(0XFFFAA,	"LVIS");
	set_cmt	(0XFFFAB,	"Watchdog timer enable register",	1);
	create_byte	(0XFFFAB);
	set_name	(0XFFFAB,	"WDTE");
	set_cmt	(0XFFFAC,	"CRC input register",	1);
	create_byte	(0XFFFAC);
	set_name	(0XFFFAC,	"CRCIN");
	create_byte	(0XFFFAD);
	create_byte	(0XFFFAE);
	create_byte	(0XFFFAF);
	set_cmt	(0XFFFB0,	"DMA SFR address register 0",	1);
	set_name	(0XFFFB0,	"DSA0");
	set_cmt	(0XFFFB1,	"DMA SFR address register 0",	1);
	set_name	(0XFFFB1,	"DSA1");
	set_cmt	(0XFFFB2,	"DMA RAM address register 0",	1);
	set_name	(0XFFFB2,	"DRA0");
	set_cmt	(0XFFFB4,	"DMA RAM address register 0",	1);
	set_name	(0XFFFB4,	"DRA1");
	set_cmt	(0XFFFB6,	"DMA byte count register 0",	1);
	set_name	(0XFFFB6,	"DBC0");
	set_cmt	(0XFFFB8,	"DMA byte count register 0",	1);
	set_name	(0XFFFB8,	"DBC1");
	set_cmt	(0XFFFBA,	"DMA mode control register 0",	1);
	set_name	(0XFFFBA,	"DMC0");
	set_cmt	(0XFFFBB,	"DMA mode control register 0",	1);
	set_name	(0XFFFBB,	"DMC1");
	set_cmt	(0XFFFBC,	"DMA operation control register 0",	1);
	set_name	(0XFFFBC,	"DRC0");
	set_cmt	(0XFFFBD,	"DMA operation control register 0",	1);
	set_name	(0XFFFBD,	"DRC1");
	set_cmt	(0XFFFD0,	"Interrupt request flag register 2",	1);
	create_byte	(0XFFFD0);
	set_name	(0XFFFD0,	"IF2");
	set_cmt	(0XFFFD2,	"Interrupt request flag register 3L",	1);
	set_name	(0XFFFD2,	"IF3");
	set_cmt	(0XFFFD4,	"Interrupt mask flag register 2",	1);
	create_byte	(0XFFFD4);
	set_name	(0XFFFD4,	"MK2");
	set_cmt	(0XFFFD6,	"Interrupt mask flag register 3L",	1);
	set_name	(0XFFFD6,	"MK3");
	set_cmt	(0XFFFD8,	"Priority specification flag register 02",	1);
	set_name	(0XFFFD8,	"PR02");
	set_cmt	(0XFFFDA,	"Priority specification flag register 03L",	1);
	set_name	(0XFFFDA,	"PR03");
	set_cmt	(0XFFFDC,	"Priority specification flag register 12",	1);
	set_name	(0XFFFDC,	"PR12");
	set_cmt	(0XFFFDE,	"Priority specification flag register 13L",	1);
	set_name	(0XFFFDE,	"PR13");
	set_cmt	(0XFFFE0,	"Interrupt request flag register 0",	1);
	create_byte	(0XFFFE0);
	set_name	(0XFFFE0,	"IF0");
	create_byte	(0XFFFE1);
	set_name	(0XFFFE1,	"IF0H");
	set_cmt	(0XFFFE2,	"Interrupt request flag register 1",	1);
	create_byte	(0XFFFE2);
	set_name	(0XFFFE2,	"IF1");
	create_byte	(0XFFFE3);
	set_name	(0XFFFE3,	"IF1H");
	set_cmt	(0XFFFE4,	"Interrupt mask flag register 0",	1);
	create_byte	(0XFFFE4);
	set_name	(0XFFFE4,	"MK0");
	create_byte	(0XFFFE5);
	set_name	(0XFFFE5,	"MK0H");
	set_cmt	(0XFFFE6,	"Interrupt mask flag register 1",	1);
	create_byte	(0XFFFE6);
	set_name	(0XFFFE6,	"MK1");
	create_byte	(0XFFFE7);
	set_name	(0XFFFE7,	"MK1H");
	set_cmt	(0XFFFE8,	"Priority specification flag register 00",	1);
	create_byte	(0XFFFE8);
	set_name	(0XFFFE8,	"PR00");
	create_byte	(0XFFFE9);
	set_cmt	(0XFFFEA,	"Priority specification flag register 01",	1);
	create_byte	(0XFFFEA);
	set_name	(0XFFFEA,	"PR01");
	create_byte	(0XFFFEB);
	set_cmt	(0XFFFEC,	"Priority specification flag register 10",	1);
	create_byte	(0XFFFEC);
	set_name	(0XFFFEC,	"PR10");
	create_byte	(0XFFFED);
	set_cmt	(0XFFFEE,	"Priority specification flag register 11",	1);
	create_byte	(0XFFFEE);
	set_name	(0XFFFEE,	"PR11");
	create_byte	(0XFFFEF);
	set_cmt	(0XFFFF0,	"Multiplication/division data register A (L)",	1);
	create_word	(0XFFFF0);
	set_name	(0XFFFF0,	"MDAL");
	set_cmt	(0XFFFF2,	"Multiplication/division data register A (H)",	1);
	create_word	(0XFFFF2);
	set_name	(0XFFFF2,	"MDAH");
	set_cmt	(0XFFFF4,	"Multiplication/division data register B (L)",	1);
	create_word	(0XFFFF4);
	set_name	(0XFFFF4,	"MDBL");
	set_cmt	(0XFFFF6,	"Multiplication/division data register B (H)",	1);
	create_word	(0XFFFF6);
	set_name	(0XFFFF6,	"MDBH");
	set_cmt	(0XFFFF8,	"Stack pointer",	1);
	create_word	(0XFFFF8);
	set_name	(0XFFFF8,	"SP");
	set_cmt	(0XFFFFA,	"Program status word",	1);
	create_byte	(0XFFFFA);
	set_name	(0XFFFFA,	"PSW");
	set_cmt	(0XFFFFC,	"Code Segment",	1);
	create_byte	(0XFFFFC);
	set_name	(0XFFFFC,	"CS");
	set_cmt	(0XFFFFD,	"Extension address specification",	1);
	create_byte	(0XFFFFD);
	set_name	(0XFFFFD,	"ES");
	set_cmt	(0XFFFFE,	"Processor mode control register",	1);
	create_byte	(0XFFFFE);
	set_name	(0XFFFFE,	"PMC");
	set_name	(0XFFFFF,	"MEM");
}

static Functions_0(void) {

	add_func    (0X185,0X196);
	set_func_flags(0X185,0x1000);
	set_frame_size(0X185, 0, 0, 0);
	add_func    (0X196,0X1C1);
	set_func_flags(0X196,0x1000);
	set_func_cmt(0X196,	"Multiplication mode (unsigned) (default) ", 1);
	set_frame_size(0X196, 0, 0, 0);
	add_func    (0X1C1,0X200);
	set_func_flags(0X1C1,0x1000);
	set_frame_size(0X1C1, 0, 0, 0);
	add_func    (0X200,0X23C);
	set_func_flags(0X200,0x1000);
	set_frame_size(0X200, 0, 0, 0);
	add_func    (0X23C,0X270);
	set_func_flags(0X23C,0x1000);
	set_frame_size(0X23C, 0, 0, 0);
	add_func    (0X270,0X27F);
	set_func_flags(0X270,0x1000);
	set_func_cmt(0X270,	"FFEDA.w = FFEDA.w + AX\nFFED8.w = FFED8.w + FFEDC.w", 1);
	set_frame_size(0X270, 0, 0, 0);
	add_func    (0X27F,0X291);
	set_func_flags(0X27F,0x1000);
	set_frame_size(0X27F, 0, 0, 0);
	add_func    (0X291,0X2AC);
	set_func_flags(0X291,0x1000);
	set_frame_size(0X291, 0, 0, 0);
	add_func    (0X2AC,0X2CB);
	set_func_flags(0X2AC,0x1000);
	set_func_cmt(0X2AC,	"A: Shift\nword_FFEDA\nword_FFED8", 1);
	set_frame_size(0X2AC, 0, 0, 0);
	add_func    (0X2CB,0X2DF);
	set_func_flags(0X2CB,0x1000);
	set_frame_size(0X2CB, 0, 0, 0);
	add_func    (0X2E9,0X337);
	set_func_flags(0X2E9,0x1000);
	set_func_cmt(0X2E9,	"UART0 reception transfer end", 1);
	set_frame_size(0X2E9, 0, 0, 0);
	add_func    (0X337,0X37C);
	set_func_flags(0X337,0x1000);
	set_func_cmt(0X337,	"UART0 reception communication error occurrence", 1);
	set_frame_size(0X337, 0, 0, 0);
	add_func    (0X37C,0X3C0);
	set_func_flags(0X37C,0x1000);
	set_func_cmt(0X37C,	"Transfer end interrupt", 1);
	set_frame_size(0X37C, 0, 0, 0);
	set_name(0X382, "save_fed4_to_stack", SN_LOCAL);
	set_name(0X3A4, "no_data_in_buffer", SN_LOCAL);
	set_name(0X3B3, "restore_fed4_from_stack", SN_LOCAL);
	add_func    (0X4BD,0X4C2);
	set_func_flags(0X4BD,0x1000);
	set_frame_size(0X4BD, 0, 0, 0);
	add_func    (0X4C2,0X4DE);
	set_func_flags(0X4C2,0x1000);
	set_frame_size(0X4C2, 0, 0, 0);
	add_func    (0X4DE,0X545);
	set_func_flags(0X4DE,0x1000);
	set_frame_size(0X4DE, 0, 0, 0);
	add_func    (0X545,0X54A);
	set_func_flags(0X545,0x1000);
	set_frame_size(0X545, 0, 0, 0);
	add_func    (0X54A,0X558);
	set_func_flags(0X54A,0x1000);
	set_frame_size(0X54A, 0, 0, 0);
	add_func    (0X558,0X59C);
	set_func_flags(0X558,0x1000);
	set_frame_size(0X558, 0, 0, 0);
	add_func    (0X59C,0X5B8);
	set_func_flags(0X59C,0x1000);
	SetType(0X59C, "int __cdecl main(int argc, const char **argv, const char **envp);");
	set_frame_size(0X59C, 0, 0, 0);
	set_name(0X5B6, "exit", SN_LOCAL);
	add_func    (0X228E,0X22B6);
	set_func_flags(0X228E,0x1000);
	set_frame_size(0X228E, 0, 0, 0);
	add_func    (0X22B6,0X22BA);
	set_func_flags(0X22B6,0x1000);
	set_frame_size(0X22B6, 0, 0, 0);
	add_func    (0X22BA,0X22BE);
	set_func_flags(0X22BA,0x1000);
	set_frame_size(0X22BA, 0, 0, 0);
	add_func    (0X22BE,0X22C2);
	set_func_flags(0X22BE,0x1000);
	set_frame_size(0X22BE, 0, 0, 0);
	add_func    (0X22C2,0X22C6);
	set_func_flags(0X22C2,0x1000);
	set_frame_size(0X22C2, 0, 0, 0);
	add_func    (0X22C6,0X22CF);
	set_func_flags(0X22C6,0x1000);
	set_frame_size(0X22C6, 0, 0, 0);
	add_func    (0X22CF,0X22E6);
	set_func_flags(0X22CF,0x1000);
	set_frame_size(0X22CF, 0, 0, 0);
	add_func    (0X22E6,0X22F2);
	set_func_flags(0X22E6,0x1000);
	set_frame_size(0X22E6, 0, 0, 0);
	add_func    (0X22F2,0X232F);
	set_func_flags(0X22F2,0x1000);
	set_frame_size(0X22F2, 0, 0, 0);
	add_func    (0X232F,0X2336);
	set_func_flags(0X232F,0x1000);
	set_frame_size(0X232F, 0, 0, 0);
	add_func    (0X2336,0X233D);
	set_func_flags(0X2336,0x1000);
	set_frame_size(0X2336, 0, 0, 0);
	add_func    (0X233D,0X2355);
	set_func_flags(0X233D,0x1000);
	set_frame_size(0X233D, 0, 0, 0);
	add_func    (0X2355,0X2362);
	set_func_flags(0X2355,0x1000);
	set_frame_size(0X2355, 0, 0, 0);
	add_func    (0X236F,0X245D);
	set_func_flags(0X236F,0x1000);
	set_frame_size(0X236F, 0, 0, 0);
	add_func    (0X245D,0X2461);
	set_func_flags(0X245D,0x1000);
	set_frame_size(0X245D, 0, 0, 0);
	add_func    (0X2461,0X2465);
	set_func_flags(0X2461,0x1000);
	set_frame_size(0X2461, 0, 0, 0);
	add_func    (0X2465,0X2469);
	set_func_flags(0X2465,0x1000);
	set_frame_size(0X2465, 0, 0, 0);
	add_func    (0X2469,0X246D);
	set_func_flags(0X2469,0x1000);
	set_frame_size(0X2469, 0, 0, 0);
	add_func    (0X246D,0X24C5);
	set_func_flags(0X246D,0x1000);
	set_frame_size(0X246D, 0, 0, 0);
	set_name(0X24A1, "mainloop", SN_LOCAL);
	add_func    (0X24C6,0X2506);
	set_func_flags(0X24C6,0x1000);
	set_frame_size(0X24C6, 0, 0, 0);
	add_func    (0X2506,0X252E);
	set_func_flags(0X2506,0x1000);
	set_frame_size(0X2506, 0, 0, 0);
	add_func    (0X252E,0X25D6);
	set_func_flags(0X252E,0x1000);
	set_frame_size(0X252E, 0, 0, 0);
	add_func    (0X25D6,0X2607);
	set_func_flags(0X25D6,0x1000);
	set_frame_size(0X25D6, 0, 0, 0);
	add_func    (0X262E,0X2654);
	set_func_flags(0X262E,0x1000);
	set_frame_size(0X262E, 0, 0, 0);
	add_func    (0X2654,0X2688);
	set_func_flags(0X2654,0x1000);
	set_frame_size(0X2654, 0, 0, 0);
	add_func    (0X2689,0X268D);
	set_func_flags(0X2689,0x1000);
	set_frame_size(0X2689, 0, 0, 0);
	add_func    (0X268D,0X268E);
	set_func_flags(0X268D,0x1000);
	set_frame_size(0X268D, 0, 0, 0);
	add_func    (0X268E,0X2692);
	set_func_flags(0X268E,0x1000);
	set_frame_size(0X268E, 0, 0, 0);
	add_func    (0X2692,0X26C1);
	set_func_flags(0X2692,0x1000);
	set_frame_size(0X2692, 0, 0, 0);
	add_func    (0X26C1,0X26C9);
	set_func_flags(0X26C1,0x1000);
	set_frame_size(0X26C1, 0, 0, 0);
	add_func    (0X26C9,0X278D);
	set_func_flags(0X26C9,0x1000);
	set_frame_size(0X26C9, 0, 0, 0);
	add_func    (0X278D,0X279E);
	set_func_flags(0X278D,0x1000);
	set_frame_size(0X278D, 0, 0, 0);
	add_func    (0X279E,0X27AF);
	set_func_flags(0X279E,0x1000);
	set_frame_size(0X279E, 0, 0, 0);
	add_func    (0X27AF,0X27BF);
	set_func_flags(0X27AF,0x1000);
	set_frame_size(0X27AF, 0, 0, 0);
	add_func    (0X27BF,0X27D0);
	set_func_flags(0X27BF,0x1000);
	set_frame_size(0X27BF, 0, 0, 0);
	add_func    (0X27D0,0X27E1);
	set_func_flags(0X27D0,0x1000);
	set_frame_size(0X27D0, 0, 0, 0);
	add_func    (0X27E1,0X27EB);
	set_func_flags(0X27E1,0x1000);
	set_frame_size(0X27E1, 0, 0, 0);
	add_func    (0X27EB,0X27EF);
	set_func_flags(0X27EB,0x1000);
	set_frame_size(0X27EB, 0, 0, 0);
	add_func    (0X27EF,0X280A);
	set_func_flags(0X27EF,0x1000);
	set_frame_size(0X27EF, 0, 0, 0);
	add_func    (0X280A,0X280E);
	set_func_flags(0X280A,0x10c0);
	set_frame_size(0X280A, 0, 0, 0);
	add_func    (0X280E,0X284A);
	set_func_flags(0X280E,0x1000);
	set_func_cmt(0X280E,	"AX: EPPROM Address\nP1: ptr buffer\nP2: len", 1);
	set_frame_size(0X280E, 0, 0, 0);
	add_func    (0X284A,0X2882);
	set_func_flags(0X284A,0x1000);
	set_frame_size(0X284A, 0, 0, 0);
	add_func    (0X2882,0X28C1);
	set_func_flags(0X2882,0x1000);
	set_func_cmt(0X2882,	"Addr: F1000 + AX\nArg1: buffer\nArg2: len", 1);
	set_frame_size(0X2882, 0, 0, 0);
	add_func    (0X28C1,0X28F9);
	set_func_flags(0X28C1,0x1000);
	set_frame_size(0X28C1, 0, 0, 0);
	add_func    (0X28F9,0X2928);
	set_func_flags(0X28F9,0x1000);
	set_func_cmt(0X28F9,	"AX: Blocknumber", 1);
	set_frame_size(0X28F9, 0, 0, 0);
	add_func    (0X2928,0X296A);
	set_func_flags(0X2928,0x1000);
	set_frame_size(0X2928, 0, 0, 0);
	add_func    (0X296A,0X29A9);
	set_func_flags(0X296A,0x1000);
	set_frame_size(0X296A, 0, 0, 0);
	set_name(0X297C, "skip", SN_LOCAL);
	add_func    (0X29A9,0X29D9);
	set_func_flags(0X29A9,0x1000);
	set_frame_size(0X29A9, 0, 0, 0);
	set_name(0X29D4, "skip", SN_LOCAL);
	add_func    (0X29D9,0X29F6);
	set_func_flags(0X29D9,0x1000);
	set_frame_size(0X29D9, 0, 0, 0);
	add_func    (0X29F6,0X2A32);
	set_func_flags(0X29F6,0x1000);
	set_frame_size(0X29F6, 0, 0, 0);
	add_func    (0X2A60,0X2A66);
	set_func_flags(0X2A60,0x1000);
	set_frame_size(0X2A60, 0, 0, 0);
	add_func    (0X2A66,0X2A88);
	set_func_flags(0X2A66,0x1000);
	set_frame_size(0X2A66, 0, 0, 0);
	add_func    (0X2B1B,0X2B7E);
	set_func_flags(0X2B1B,0x1000);
	set_frame_size(0X2B1B, 0, 0, 0);
	add_func    (0X2B7E,0X2C33);
	set_func_flags(0X2B7E,0x1000);
	set_frame_size(0X2B7E, 0, 0, 0);
	add_func    (0X2C33,0X2D28);
	set_func_flags(0X2C33,0x1000);
	set_frame_size(0X2C33, 0, 0, 0);
	set_name(0X2C40, "initbuffer_ff", SN_LOCAL);
	add_func    (0X2D28,0X2D9A);
	set_func_flags(0X2D28,0x1000);
	set_func_cmt(0X2D28,	"ax: buffer (len0x18)", 1);
	set_frame_size(0X2D28, 0, 0, 0);
	set_name(0X2D92, "write_end", SN_LOCAL);
	add_func    (0X2D9A,0X2F44);
	set_func_flags(0X2D9A,0x1000);
	set_frame_size(0X2D9A, 0, 0, 0);
	add_func    (0X2F44,0X2FC3);
	set_func_flags(0X2F44,0x1000);
	set_frame_size(0X2F44, 0, 0, 0);
	set_name(0X2F51, "initbuffer", SN_LOCAL);
	set_name(0X2FB1, "dec_innerloop", SN_LOCAL);
	set_name(0X2FB6, "break_outerloop", SN_LOCAL);
	set_name(0X2FBB, "exit", SN_LOCAL);
	add_func    (0X2FC3,0X31AE);
	set_func_flags(0X2FC3,0x1000);
	set_frame_size(0X2FC3, 0, 0, 0);
	set_name(0X3014, "crc1_nok", SN_LOCAL);
	set_name(0X304C, "crc2_nok", SN_LOCAL);
	set_name(0X3080, "crc3_nok", SN_LOCAL);
	add_func    (0X31AE,0X31C5);
	set_func_flags(0X31AE,0x1000);
	set_frame_size(0X31AE, 0, 0, 0);
	add_func    (0X31C5,0X31EE);
	set_func_flags(0X31C5,0x1000);
	set_frame_size(0X31C5, 0, 0, 0);
	add_func    (0X31EE,0X3217);
	set_func_flags(0X31EE,0x1000);
	set_frame_size(0X31EE, 0, 0, 0);
	add_func    (0X3217,0X3240);
	set_func_flags(0X3217,0x1000);
	set_frame_size(0X3217, 0, 0, 0);
	add_func    (0X3240,0X326B);
	set_func_flags(0X3240,0x1000);
	set_frame_size(0X3240, 0, 0, 0);
	set_name(0X324C, "crcloop", SN_LOCAL);
	set_name(0X3260, "crcloop_end", SN_LOCAL);
	add_func    (0X326B,0X3272);
	set_func_flags(0X326B,0x1000);
	set_frame_size(0X326B, 0, 0, 0);
	add_func    (0X3272,0X3277);
	set_func_flags(0X3272,0x1000);
	set_frame_size(0X3272, 0, 0, 0);
	add_func    (0X3277,0X327C);
	set_func_flags(0X3277,0x1000);
	set_frame_size(0X3277, 0, 0, 0);
	add_func    (0X327C,0X3286);
	set_func_flags(0X327C,0x1000);
	set_frame_size(0X327C, 0, 0, 0);
	add_func    (0X3286,0X328F);
	set_func_flags(0X3286,0x1000);
	set_frame_size(0X3286, 0, 0, 0);
	add_func    (0X328F,0X3299);
	set_func_flags(0X328F,0x1000);
	set_frame_size(0X328F, 0, 0, 0);
	add_func    (0X3299,0X32A2);
	set_func_flags(0X3299,0x1000);
	set_frame_size(0X3299, 0, 0, 0);
	add_func    (0X32A2,0X32A3);
	set_func_flags(0X32A2,0x1000);
	set_frame_size(0X32A2, 0, 0, 0);
	add_func    (0X32A3,0X32AE);
	set_func_flags(0X32A3,0x1000);
	set_frame_size(0X32A3, 0, 0, 0);
	add_func    (0X3314,0X33A8);
	set_func_flags(0X3314,0x1000);
	set_frame_size(0X3314, 0, 0, 0);
	add_func    (0X33A8,0X3571);
	set_func_flags(0X33A8,0x1000);
	set_frame_size(0X33A8, 0, 0, 0);
	set_name(0X33CD, "SpeedMode", SN_LOCAL);
	set_name(0X3415, "TripMode", SN_LOCAL);
	set_name(0X345D, "resetTrip", SN_LOCAL);
	set_name(0X3530, "GearMode", SN_LOCAL);
	add_func    (0X3571,0X35AB);
	set_func_flags(0X3571,0x1000);
	set_frame_size(0X3571, 0, 0, 0);
	add_func    (0X35AB,0X35D2);
	set_func_flags(0X35AB,0x1000);
	set_frame_size(0X35AB, 0, 0, 0);
	add_func    (0X35D2,0X35EA);
	set_func_flags(0X35D2,0x1000);
	set_frame_size(0X35D2, 0, 0, 0);
	add_func    (0X35EA,0X3602);
	set_func_flags(0X35EA,0x1000);
	set_frame_size(0X35EA, 0, 0, 0);
	add_func    (0X3602,0X362B);
	set_func_flags(0X3602,0x1000);
	set_frame_size(0X3602, 0, 0, 0);
	add_func    (0X362B,0X36CD);
	set_func_flags(0X362B,0x1000);
	set_frame_size(0X362B, 0, 0, 0);
	add_func    (0X36CD,0X36EE);
	set_func_flags(0X36CD,0x1000);
	set_frame_size(0X36CD, 0, 0, 0);
	add_func    (0X36EE,0X372F);
	set_func_flags(0X36EE,0x1000);
	set_frame_size(0X36EE, 0, 0, 0);
	add_func    (0X372F,0X3759);
	set_func_flags(0X372F,0x1000);
	set_frame_size(0X372F, 0, 0, 0);
	add_func    (0X3759,0X3772);
	set_func_flags(0X3759,0x1000);
	set_frame_size(0X3759, 0, 0, 0);
	add_func    (0X3772,0X3789);
	set_func_flags(0X3772,0x1000);
	set_frame_size(0X3772, 0, 0, 0);
	add_func    (0X3789,0X37EF);
	set_func_flags(0X3789,0x1000);
	set_frame_size(0X3789, 0, 0, 0);
	add_func    (0X37EF,0X38A3);
	set_func_flags(0X37EF,0x1000);
	set_frame_size(0X37EF, 0, 0, 0);
	add_func    (0X38E1,0X392A);
	set_func_flags(0X38E1,0x1000);
	set_frame_size(0X38E1, 0, 0, 0);
	add_func    (0X392A,0X397A);
	set_func_flags(0X392A,0x1000);
	set_frame_size(0X392A, 0, 0, 0);
	set_name(0X395A, "not_zero", SN_LOCAL);
	set_name(0X3977, "exit", SN_LOCAL);
	add_func    (0X397A,0X399F);
	set_func_flags(0X397A,0x1000);
	set_frame_size(0X397A, 0, 0, 0);
	add_func    (0X399F,0X39B2);
	set_func_flags(0X399F,0x1000);
	set_frame_size(0X399F, 0, 0, 0);
	add_func    (0X39B2,0X39D7);
	set_func_flags(0X39B2,0x1000);
	set_frame_size(0X39B2, 0, 0, 0);
	add_func    (0X39D7,0X3A5A);
	set_func_flags(0X39D7,0x1000);
	set_frame_size(0X39D7, 0, 0, 0);
	add_func    (0X3A5A,0X3AD6);
	set_func_flags(0X3A5A,0x1000);
	set_frame_size(0X3A5A, 0, 0, 0);
	set_name(0X3AD5, "isStartSequence", SN_LOCAL);
	add_func    (0X3AD6,0X3C38);
	set_func_flags(0X3AD6,0x1000);
	set_frame_size(0X3AD6, 0, 0, 0);
	set_name(0X3B1E, "write_TripInfos_to_LCD", SN_LOCAL);
	set_name(0X3B77, "write_ErMinus_to_LCD", SN_LOCAL);
	add_func    (0X3C38,0X3CE4);
	set_func_flags(0X3C38,0x1000);
	set_frame_size(0X3C38, 0, 0, 0);
	add_func    (0X3CE4,0X3D01);
	set_func_flags(0X3CE4,0x1000);
	set_frame_size(0X3CE4, 0, 0, 0);
	add_func    (0X3D01,0X3D54);
	set_func_flags(0X3D01,0x1000);
	set_frame_size(0X3D01, 0, 0, 0);
	set_name(0X3D1D, "renderTopSpeed", SN_LOCAL);
	set_name(0X3D32, "renderCurrentSpeed", SN_LOCAL);
	set_name(0X3D44, "limitNumbers", SN_LOCAL);
	add_func    (0X3D54,0X3EDE);
	set_func_flags(0X3D54,0x1000);
	set_frame_size(0X3D54, 0, 0, 0);
	set_name(0X3D87, "write_C0_to_LCD", SN_LOCAL);
	set_name(0X3DB1, "write_C1_to_LCD", SN_LOCAL);
	set_name(0X3DDB, "write_E1_to_LCD", SN_LOCAL);
	set_name(0X3E05, "write_E2_to_LCD", SN_LOCAL);
	set_name(0X3E30, "write_E3_to_LCD", SN_LOCAL);
	set_name(0X3E5C, "write_E0_to_LCD", SN_LOCAL);
	set_name(0X3E86, "write_P0_to_LCD", SN_LOCAL);
	set_name(0X3EB0, "write_P1_to_LCD", SN_LOCAL);
	set_name(0X3EDA, "return", SN_LOCAL);
	add_func    (0X3EDE,0X3F31);
	set_func_flags(0X3EDE,0x1000);
	set_frame_size(0X3EDE, 0, 0, 0);
	add_func    (0X3F31,0X3F6F);
	set_func_flags(0X3F31,0x1000);
	set_frame_size(0X3F31, 0, 0, 0);
	add_func    (0X3F6F,0X3FC3);
	set_func_flags(0X3F6F,0x1000);
	set_frame_size(0X3F6F, 0, 0, 0);
	add_func    (0X3FC3,0X4000);
	set_func_flags(0X3FC3,0x1000);
	set_frame_size(0X3FC3, 0, 0, 0);
	add_func    (0X403E,0X4071);
	set_func_flags(0X403E,0x1000);
	set_frame_size(0X403E, 0, 0, 0);
	add_func    (0X4071,0X40E6);
	set_func_flags(0X4071,0x1000);
	set_frame_size(0X4071, 0, 0, 0);
	add_func    (0X40E6,0X4124);
	set_func_flags(0X40E6,0x1000);
	set_frame_size(0X40E6, 0, 0, 0);
	add_func    (0X4124,0X414B);
	set_func_flags(0X4124,0x1000);
	set_frame_size(0X4124, 0, 0, 0);
	add_func    (0X414B,0X417E);
	set_func_flags(0X414B,0x1000);
	set_func_cmt(0X414B,	"Returns:\nDE\nAX", 1);
	set_frame_size(0X414B, 0, 0, 0);
	add_func    (0X417E,0X4333);
	set_func_flags(0X417E,0x1000);
	set_frame_size(0X417E, 0, 0, 0);
	add_func    (0X4333,0X43A6);
	set_func_flags(0X4333,0x1000);
	set_frame_size(0X4333, 0, 0, 0);
	add_func    (0X43A6,0X43DD);
	set_func_flags(0X43A6,0x1000);
	set_frame_size(0X43A6, 0, 0, 0);
	add_func    (0X43DD,0X4414);
	set_func_flags(0X43DD,0x1000);
	set_frame_size(0X43DD, 0, 0, 0);
	add_func    (0X4414,0X443B);
	set_func_flags(0X4414,0x1000);
	set_func_cmt(0X4414,	"memset_F0400_F0427_ax", 1);
	set_frame_size(0X4414, 0, 0, 0);
	add_func    (0X4487,0X45CF);
	set_func_flags(0X4487,0x1000);
	set_frame_size(0X4487, 0, 0, 0);
	add_func    (0X45CF,0X45EA);
	set_func_flags(0X45CF,0x1000);
	set_frame_size(0X45CF, 0, 0, 0);
	set_name(0X45E8, "lower_than", SN_LOCAL);
	add_func    (0X45EA,0X4610);
	set_func_flags(0X45EA,0x1000);
	set_frame_size(0X45EA, 0, 0, 0);
	add_func    (0X4610,0X4695);
	set_func_flags(0X4610,0x1000);
	set_frame_size(0X4610, 0, 0, 0);
	add_func    (0X4695,0X46D0);
	set_func_flags(0X4695,0x1000);
	set_frame_size(0X4695, 0, 0, 0);
	add_func    (0X46F4,0X478F);
	set_func_flags(0X46F4,0x1000);
	set_frame_size(0X46F4, 0, 0, 0);
	add_func    (0X478F,0X47B0);
	set_func_flags(0X478F,0x1000);
	set_frame_size(0X478F, 0, 0, 0);
	add_func    (0X47B0,0X47D3);
	set_func_flags(0X47B0,0x1000);
	set_func_cmt(0X47B0,	"ax: distance", 1);
	set_frame_size(0X47B0, 0, 0, 0);
	add_func    (0X47D3,0X47F6);
	set_func_flags(0X47D3,0x1000);
	set_frame_size(0X47D3, 0, 0, 0);
	add_func    (0X47F6,0X486A);
	set_func_flags(0X47F6,0x1000);
	set_frame_size(0X47F6, 0, 0, 0);
	add_func    (0X486A,0X4877);
	set_func_flags(0X486A,0x1000);
	set_frame_size(0X486A, 0, 0, 0);
	add_func    (0X4887,0X4898);
	set_func_flags(0X4887,0x1000);
	set_frame_size(0X4887, 0, 0, 0);
	add_func    (0X4898,0X48DF);
	set_func_flags(0X4898,0x1000);
	set_frame_size(0X4898, 0, 0, 0);
	add_func    (0X48DF,0X4910);
	set_func_flags(0X48DF,0x1000);
	set_frame_size(0X48DF, 0, 0, 0);
	add_func    (0X4910,0X4927);
	set_func_flags(0X4910,0x1000);
	set_frame_size(0X4910, 0, 0, 0);
	add_func    (0X4927,0X4942);
	set_func_flags(0X4927,0x1000);
	set_frame_size(0X4927, 0, 0, 0);
	add_func    (0X4942,0X494A);
	set_func_flags(0X4942,0x1000);
	set_frame_size(0X4942, 0, 0, 0);
	add_func    (0X49C5,0X4A90);
	set_func_flags(0X49C5,0x1000);
	set_frame_size(0X49C5, 0, 0, 0);
	add_func    (0X4A90,0X4B5D);
	set_func_flags(0X4A90,0x1000);
	set_frame_size(0X4A90, 0, 0, 0);
	add_func    (0X4B5D,0X4C1A);
	set_func_flags(0X4B5D,0x1000);
	set_frame_size(0X4B5D, 0, 0, 0);
	add_func    (0X4CD6,0X4EB4);
	set_func_flags(0X4CD6,0x1000);
	set_frame_size(0X4CD6, 0, 0, 0);
	add_func    (0X4EB4,0X4F73);
	set_func_flags(0X4EB4,0x1000);
	set_frame_size(0X4EB4, 0, 0, 0);
	add_func    (0X4FAB,0X4FC1);
	set_func_flags(0X4FAB,0x1000);
	set_frame_size(0X4FAB, 0, 0, 0);
	add_func    (0X4FC1,0X4FCF);
	set_func_flags(0X4FC1,0x1000);
	set_frame_size(0X4FC1, 0, 0, 0);
	add_func    (0X5239,0X5294);
	set_func_flags(0X5239,0x1000);
	set_frame_size(0X5239, 0, 0, 0);
	set_name(0X523D, "sum_frame_bytes", SN_LOCAL);
	set_name(0X5251, "check_checksum", SN_LOCAL);
	set_name(0X528E, "wrong_check_sum", SN_LOCAL);
	set_name(0X5292, "return", SN_LOCAL);
	add_func    (0X5294,0X534A);
	set_func_flags(0X5294,0x1000);
	set_frame_size(0X5294, 0, 0, 0);
	add_func    (0X534A,0X535B);
	set_func_flags(0X534A,0x1000);
	set_func_cmt(0X534A,	"retrieves programming infos from controler (C0,C1, E0-..)", 1);
	set_frame_size(0X534A, 0, 0, 0);
	add_func    (0X535B,0X5441);
	set_func_flags(0X535B,0x1000);
	set_frame_size(0X535B, 0, 0, 0);
	add_func    (0X5441,0X5483);
	set_func_flags(0X5441,0x1000);
	set_frame_size(0X5441, 0, 0, 0);
	add_func    (0X54A4,0X54BF);
	set_func_flags(0X54A4,0x1000);
	set_frame_size(0X54A4, 0, 0, 0);
	add_func    (0X54BF,0X54EF);
	set_func_flags(0X54BF,0x1000);
	set_frame_size(0X54BF, 0, 0, 0);
	add_func    (0X54EF,0X5554);
	set_func_flags(0X54EF,0x1000);
	set_frame_size(0X54EF, 0, 0, 0);
	add_func    (0X5554,0X55CF);
	set_func_flags(0X5554,0x1000);
	set_frame_size(0X5554, 0, 0, 0);
	add_func    (0X55CF,0X5601);
	set_func_flags(0X55CF,0x1000);
	set_frame_size(0X55CF, 0, 0, 0);
	add_func    (0X5601,0X560F);
	set_func_flags(0X5601,0x1000);
	set_frame_size(0X5601, 0, 0, 0);
	add_func    (0X560F,0X5624);
	set_func_flags(0X560F,0x1000);
	set_frame_size(0X560F, 0, 0, 0);
	add_func    (0X5624,0X5636);
	set_func_flags(0X5624,0x1000);
	set_frame_size(0X5624, 0, 0, 0);
	add_func    (0X5636,0X5648);
	set_func_flags(0X5636,0x1000);
	set_frame_size(0X5636, 0, 0, 0);
	add_func    (0X5648,0X56BF);
	set_func_flags(0X5648,0x1000);
	set_frame_size(0X5648, 0, 0, 0);
	set_name(0X565C, "step_00", SN_LOCAL);
	set_name(0X566B, "doreset_uartbuffer", SN_LOCAL);
	set_name(0X5670, "step_10", SN_LOCAL);
	set_name(0X5684, "step_20", SN_LOCAL);
	set_name(0X56A8, "step_30", SN_LOCAL);
	set_name(0X56BA, "doreset_uartbuffer2", SN_LOCAL);
	add_func    (0X56BF,0X56DB);
	set_func_flags(0X56BF,0x1000);
	set_frame_size(0X56BF, 0, 0, 0);
	add_func    (0X56DB,0X56E4);
	set_func_flags(0X56DB,0x1000);
	set_func_cmt(0X56DB,	"maybe the len of the whole frame", 1);
	set_frame_size(0X56DB, 0, 0, 0);
	add_func    (0XEF004,0XEF008);
	set_func_flags(0XEF004,0x1080);
	set_frame_size(0XEF004, 0, 0, 0);
	add_func    (0XEF065,0XEF069);
	set_func_flags(0XEF065,0x1000);
	set_frame_size(0XEF065, 0, 0, 0);
	add_func    (0XEF143,0XEF152);
	set_func_flags(0XEF143,0x1000);
	set_frame_size(0XEF143, 0, 0, 0);
	add_func    (0XEF573,0XEF598);
	set_func_flags(0XEF573,0x1000);
	set_frame_size(0XEF573, 0, 0, 0);
	add_func    (0XEF598,0XEF5DA);
	set_func_flags(0XEF598,0x1000);
	set_frame_size(0XEF598, 0, 0, 0);
	add_func    (0XEF5DA,0XEF635);
	set_func_flags(0XEF5DA,0x1000);
	set_frame_size(0XEF5DA, 0, 0, 0);
	add_func    (0XEF6D8,0XEF70D);
	set_func_flags(0XEF6D8,0x1000);
	set_frame_size(0XEF6D8, 0, 0, 0);
	add_func    (0XEF70D,0XEF784);
	set_func_flags(0XEF70D,0x1000);
	set_frame_size(0XEF70D, 0, 0, 0);
	add_func    (0XEF784,0XEF791);
	set_func_flags(0XEF784,0x1000);
	set_frame_size(0XEF784, 0, 0, 0);
	add_func    (0XEF791,0XEF7D6);
	set_func_flags(0XEF791,0x1000);
	set_frame_size(0XEF791, 0, 0, 0);
	add_func    (0XEF7D6,0XEF83C);
	set_func_flags(0XEF7D6,0x1000);
	set_frame_size(0XEF7D6, 0, 0, 0);
	set_name(0XEF810, "rom_search_flashcommand", SN_LOCAL);
	set_name(0XEF81D, "rom_flash_commanddispatcher", SN_LOCAL);
	add_func    (0XEF83C,0XEF869);
	set_func_flags(0XEF83C,0x1000);
	set_frame_size(0XEF83C, 0, 0, 0);
	add_func    (0XEF869,0XEF87B);
	set_func_flags(0XEF869,0x1000);
	set_frame_size(0XEF869, 0, 0, 0);
	add_func    (0XEF87B,0XEF891);
	set_func_flags(0XEF87B,0x1000);
	set_frame_size(0XEF87B, 0, 0, 0);
	add_func    (0XEF91E,0XEF933);
	set_func_flags(0XEF91E,0x1000);
	set_frame_size(0XEF91E, 0, 0, 0);
	add_func    (0XEF933,0XEF93C);
	set_func_flags(0XEF933,0x1000);
	set_frame_size(0XEF933, 0, 0, 0);
	add_func    (0XEF93C,0XEF940);
	set_func_flags(0XEF93C,0x1000);
	set_frame_size(0XEF93C, 0, 0, 0);
	add_func    (0XEF940,0XEF966);
	set_func_flags(0XEF940,0x1000);
	set_frame_size(0XEF940, 0, 0, 0);
	add_func    (0XEF9DE,0XEF9E9);
	set_func_flags(0XEF9DE,0x1000);
	set_frame_size(0XEF9DE, 0, 0, 0);
	add_func    (0XEF9E9,0XEFA59);
	set_func_flags(0XEF9E9,0x1000);
	set_frame_size(0XEF9E9, 0, 0, 0);
	add_func    (0XEFA59,0XEFA72);
	set_func_flags(0XEFA59,0x1000);
	set_frame_size(0XEFA59, 0, 0, 0);
	add_func    (0XEFA72,0XEFA7B);
	set_func_flags(0XEFA72,0x1000);
	set_frame_size(0XEFA72, 0, 0, 0);
	add_func    (0XEFA7B,0XEFABC);
	set_func_flags(0XEFA7B,0x1000);
	set_frame_size(0XEFA7B, 0, 0, 0);
	add_func    (0XEFABC,0XEFB08);
	set_func_flags(0XEFABC,0x1000);
	set_frame_size(0XEFABC, 0, 0, 0);
	add_func    (0XEFB08,0XEFB64);
	set_func_flags(0XEFB08,0x1000);
	set_frame_size(0XEFB08, 0, 0, 0);
	add_func    (0XEFB64,0XEFB76);
	set_func_flags(0XEFB64,0x1000);
	set_frame_size(0XEFB64, 0, 0, 0);
	add_func    (0XEFB76,0XEFB89);
	set_func_flags(0XEFB76,0x1000);
	set_frame_size(0XEFB76, 0, 0, 0);
	add_func    (0XEFB89,0XEFB8F);
	set_func_flags(0XEFB89,0x1000);
	set_frame_size(0XEFB89, 0, 0, 0);
	add_func    (0XEFB8F,0XEFBA2);
	set_func_flags(0XEFB8F,0x1000);
	set_frame_size(0XEFB8F, 0, 0, 0);
	add_func    (0XEFBA2,0XEFBFE);
	set_func_flags(0XEFBA2,0x1000);
	set_frame_size(0XEFBA2, 0, 0, 0);
	add_func    (0XEFBFE,0XEFC08);
	set_func_flags(0XEFBFE,0x1000);
	set_frame_size(0XEFBFE, 0, 0, 0);
	add_func    (0XEFC08,0XEFC36);
	set_func_flags(0XEFC08,0x1000);
	set_frame_size(0XEFC08, 0, 0, 0);
	add_func    (0XEFC36,0XEFC8E);
	set_func_flags(0XEFC36,0x1000);
	set_frame_size(0XEFC36, 0, 0, 0);
	add_func    (0XEFC8E,0XEFC98);
	set_func_flags(0XEFC8E,0x1000);
	set_frame_size(0XEFC8E, 0, 0, 0);
	add_func    (0XEFC98,0XEFCCC);
	set_func_flags(0XEFC98,0x1000);
	set_frame_size(0XEFC98, 0, 0, 0);
	add_func    (0XEFCCC,0XEFCD7);
	set_func_flags(0XEFCCC,0x1000);
	set_frame_size(0XEFCCC, 0, 0, 0);
	add_func    (0XEFCD7,0XEFD17);
	set_func_flags(0XEFCD7,0x1000);
	set_frame_size(0XEFCD7, 0, 0, 0);
	add_func    (0XEFD30,0XEFD60);
	set_func_flags(0XEFD30,0x1000);
	set_frame_size(0XEFD30, 0, 0, 0);
	add_func    (0XEFD60,0XEFD6F);
	set_func_flags(0XEFD60,0x1000);
	set_frame_size(0XEFD60, 0, 0, 0);
	add_func    (0XEFD6F,0XEFD7B);
	set_func_flags(0XEFD6F,0x1000);
	set_frame_size(0XEFD6F, 0, 0, 0);
	add_func    (0XEFD7B,0XEFD94);
	set_func_flags(0XEFD7B,0x1000);
	set_frame_size(0XEFD7B, 0, 0, 0);
	add_func    (0XEFD94,0XEFDA1);
	set_func_flags(0XEFD94,0x1000);
	set_frame_size(0XEFD94, 0, 0, 0);
	add_func    (0XEFDA1,0XEFDB1);
	set_func_flags(0XEFDA1,0x1000);
	set_frame_size(0XEFDA1, 0, 0, 0);
	add_func    (0XEFDB1,0XEFDD0);
	set_func_flags(0XEFDB1,0x1000);
	set_frame_size(0XEFDB1, 0, 0, 0);
	add_func    (0XEFDD0,0XEFDE1);
	set_func_flags(0XEFDD0,0x1000);
	set_frame_size(0XEFDD0, 0, 0, 0);
	add_func    (0XEFFA1,0XEFFB2);
	set_func_flags(0XEFFA1,0x1000);
	set_frame_size(0XEFFA1, 0, 0, 0);
	add_func    (0XEFFB2,0XEFFBC);
	set_func_flags(0XEFFB2,0x1000);
	set_frame_size(0XEFFB2, 0, 0, 0);
	add_func    (0XEFFF8,0XEFFFC);
	set_func_flags(0XEFFF8,0x1080);
	set_frame_size(0XEFFF8, 0, 0, 0);
	add_func    (0XF09B8,0XF0A88);
	set_func_flags(0XF09B8,0x1000);
	set_frame_size(0XF09B8, 0, 0, 0);
}

//------------------------------------------------------------------------
// Information about functions

static Functions(void) {

	Functions_0();
}

//------------------------------------------------------------------------
// Information about segment registers

static SegRegs(void) {
	split_sreg_range(0,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X4000,"ds",0,3);
	split_sreg_range(0XF0000,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF0800,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XF1000,"ds",0,3);
	split_sreg_range(0XFF700,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XFFF00,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0XFFFFF,"ds",0,3);
	split_sreg_range(0,"RBS",0,3);
	split_sreg_range(0X4000,"RBS",0,3);
	split_sreg_range(0XF0000,"RBS",0,3);
	split_sreg_range(0XF0800,"RBS",0,3);
	split_sreg_range(0XF1000,"RBS",0,3);
	split_sreg_range(0XFF700,"RBS",0,3);
	split_sreg_range(0XFFF00,"RBS",0,3);
	split_sreg_range(0XFFFFF,"RBS",0,3);
	split_sreg_range(0,"ES",0XF,3);
	split_sreg_range(0XFC,"ES",0,3);
	split_sreg_range(0X119,"ES",0,3);
	split_sreg_range(0X11D,"ES",0XF,3);
	split_sreg_range(0X138,"ES",0XF,3);
	split_sreg_range(0X14A,"ES",0,3);
	split_sreg_range(0X4000,"ES",0XF,3);
	split_sreg_range(0X80FC,"ES",0,3);
	split_sreg_range(0X8119,"ES",0,3);
	split_sreg_range(0X811D,"ES",0XF,3);
	split_sreg_range(0X8138,"ES",0XF,3);
	split_sreg_range(0X814A,"ES",0,3);
	split_sreg_range(0XEF07E,"ES",0XE,3);
	split_sreg_range(0XEF314,"ES",0XE,3);
	split_sreg_range(0XEF322,"ES",0,3);
	split_sreg_range(0XEF330,"ES",0XE,3);
	split_sreg_range(0XEF6AC,"ES",0XE,3);
	split_sreg_range(0XEF6F4,"ES",0XE,3);
	split_sreg_range(0XEF7EB,"ES",0XE,3);
	split_sreg_range(0XEFDFC,"ES",0,3);
	split_sreg_range(0XEFEA4,"ES",0,3);
	split_sreg_range(0XF0000,"ES",0XF,3);
	split_sreg_range(0XF07E2,"ES",0,3);
	split_sreg_range(0XF0800,"ES",0XF,3);
	split_sreg_range(0XF1000,"ES",0XF,3);
	split_sreg_range(0XFF700,"ES",0XF,3);
	split_sreg_range(0XFFF00,"ES",0XF,3);
	split_sreg_range(0XFFFFF,"ES",0XF,3);
	split_sreg_range(0,"CS",0,3);
	split_sreg_range(0X4000,"CS",0,3);
	split_sreg_range(0XF0000,"CS",0,3);
	split_sreg_range(0XF0800,"CS",0,3);
	split_sreg_range(0XF1000,"CS",0,3);
	split_sreg_range(0XFF700,"CS",0,3);
	split_sreg_range(0XFFF00,"CS",0,3);
	split_sreg_range(0XFFFFF,"CS",0,3);
}

//------------------------------------------------------------------------
// Information about all patched bytes:

static Patches(void) {
}

//------------------------------------------------------------------------
// Call all byte feature functions:

static Bytes(void) {
	Bytes_0();
        end_type_updating(UTP_STRUCT);
}

// End of file.
